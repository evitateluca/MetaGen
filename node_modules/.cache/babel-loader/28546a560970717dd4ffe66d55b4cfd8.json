{"ast":null,"code":"module.exports = // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\nfunction (hljs) {\n  // Regular expression for Ada numeric literals.\n  // stolen form the VHDL highlighter\n  // Decimal literal:\n  var INTEGER_RE = '\\\\d(_|\\\\d)*';\n  var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n  var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?'; // Based literal:\n\n  var BASED_INTEGER_RE = '\\\\w+';\n  var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n  var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')'; // Identifier regex\n\n  var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*'; // bad chars, only allowed in literals\n\n  var BAD_CHARS = '[]{}%#\\'\\\"'; // Ada doesn't have block comments, only line comments\n\n  var COMMENTS = hljs.COMMENT('--', '$'); // variable declarations of the form\n  // Foo : Bar := Baz;\n  // where only Bar will be highlighted\n\n  var VAR_DECLS = {\n    // TODO: These spaces are not required by the Ada syntax\n    // however, I have yet to see handwritten Ada code where\n    // someone does not put spaces around :\n    begin: '\\\\s+:\\\\s+',\n    end: '\\\\s*(:=|;|\\\\)|=>|$)',\n    // endsWithParent: true,\n    // returnBegin: true,\n    illegal: BAD_CHARS,\n    contains: [{\n      // workaround to avoid highlighting\n      // named loops and declare blocks\n      beginKeywords: 'loop for declare others',\n      endsParent: true\n    }, {\n      // properly highlight all modifiers\n      className: 'keyword',\n      beginKeywords: 'not null constant access function procedure in out aliased exception'\n    }, {\n      className: 'type',\n      begin: ID_REGEX,\n      endsParent: true,\n      relevance: 0\n    }]\n  };\n  return {\n    case_insensitive: true,\n    keywords: {\n      keyword: 'abort else new return abs elsif not reverse abstract end ' + 'accept entry select access exception of separate aliased exit or some ' + 'all others subtype and for out synchronized array function overriding ' + 'at tagged generic package task begin goto pragma terminate ' + 'body private then if procedure type case in protected constant interface ' + 'is raise use declare range delay limited record when delta loop rem while ' + 'digits renames with do mod requeue xor',\n      literal: 'True False'\n    },\n    contains: [COMMENTS, // strings \"foobar\"\n    {\n      className: 'string',\n      begin: /\"/,\n      end: /\"/,\n      contains: [{\n        begin: /\"\"/,\n        relevance: 0\n      }]\n    }, // characters ''\n    {\n      // character literals always contain one char\n      className: 'string',\n      begin: /'.'/\n    }, {\n      // number literals\n      className: 'number',\n      begin: NUMBER_RE,\n      relevance: 0\n    }, {\n      // Attributes\n      className: 'symbol',\n      begin: \"'\" + ID_REGEX\n    }, {\n      // package definition, maybe inside generic\n      className: 'title',\n      begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?',\n      end: '(is|$)',\n      keywords: 'package body',\n      excludeBegin: true,\n      excludeEnd: true,\n      illegal: BAD_CHARS\n    }, {\n      // function/procedure declaration/definition\n      // maybe inside generic\n      begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+',\n      end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n      keywords: 'overriding function procedure with is renames return',\n      // we need to re-match the 'function' keyword, so that\n      // the title mode below matches only exactly once\n      returnBegin: true,\n      contains: [COMMENTS, {\n        // name of the function/procedure\n        className: 'title',\n        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n        end: '(\\\\(|\\\\s+|$)',\n        excludeBegin: true,\n        excludeEnd: true,\n        illegal: BAD_CHARS\n      }, // 'self'\n      // // parameter types\n      VAR_DECLS, {\n        // return type\n        className: 'type',\n        begin: '\\\\breturn\\\\s+',\n        end: '(\\\\s+|;|$)',\n        keywords: 'return',\n        excludeBegin: true,\n        excludeEnd: true,\n        // we are done with functions\n        endsParent: true,\n        illegal: BAD_CHARS\n      }]\n    }, {\n      // new type declarations\n      // maybe inside generic\n      className: 'type',\n      begin: '\\\\b(sub)?type\\\\s+',\n      end: '\\\\s+',\n      keywords: 'type',\n      excludeBegin: true,\n      illegal: BAD_CHARS\n    }, // see comment above the definition\n    VAR_DECLS // no markup\n    // relevance boosters for small snippets\n    // {begin: '\\\\s*=>\\\\s*'},\n    // {begin: '\\\\s*:=\\\\s*'},\n    // {begin: '\\\\s+:=\\\\s+'},\n    ]\n  };\n};","map":{"version":3,"names":["module","exports","hljs","INTEGER_RE","EXPONENT_RE","DECIMAL_LITERAL_RE","BASED_INTEGER_RE","BASED_LITERAL_RE","NUMBER_RE","ID_REGEX","BAD_CHARS","COMMENTS","COMMENT","VAR_DECLS","begin","end","illegal","contains","beginKeywords","endsParent","className","relevance","case_insensitive","keywords","keyword","literal","excludeBegin","excludeEnd","returnBegin"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/lowlight/node_modules/highlight.js/lib/languages/ada.js"],"sourcesContent":["module.exports = // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\nfunction(hljs) {\n    // Regular expression for Ada numeric literals.\n    // stolen form the VHDL highlighter\n\n    // Decimal literal:\n    var INTEGER_RE = '\\\\d(_|\\\\d)*';\n    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n    // Based literal:\n    var BASED_INTEGER_RE = '\\\\w+';\n    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n    var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n    // Identifier regex\n    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n    // bad chars, only allowed in literals\n    var BAD_CHARS = '[]{}%#\\'\\\"'\n\n    // Ada doesn't have block comments, only line comments\n    var COMMENTS = hljs.COMMENT('--', '$');\n\n    // variable declarations of the form\n    // Foo : Bar := Baz;\n    // where only Bar will be highlighted\n    var VAR_DECLS = {\n        // TODO: These spaces are not required by the Ada syntax\n        // however, I have yet to see handwritten Ada code where\n        // someone does not put spaces around :\n        begin: '\\\\s+:\\\\s+', end: '\\\\s*(:=|;|\\\\)|=>|$)',\n        // endsWithParent: true,\n        // returnBegin: true,\n        illegal: BAD_CHARS,\n        contains: [\n            {\n                // workaround to avoid highlighting\n                // named loops and declare blocks\n                beginKeywords: 'loop for declare others',\n                endsParent: true,\n            },\n            {\n                // properly highlight all modifiers\n                className: 'keyword',\n                beginKeywords: 'not null constant access function procedure in out aliased exception'\n            },\n            {\n                className: 'type',\n                begin: ID_REGEX,\n                endsParent: true,\n                relevance: 0,\n            }\n        ]\n    };\n\n    return {\n        case_insensitive: true,\n        keywords: {\n            keyword:\n                'abort else new return abs elsif not reverse abstract end ' +\n                'accept entry select access exception of separate aliased exit or some ' +\n                'all others subtype and for out synchronized array function overriding ' +\n                'at tagged generic package task begin goto pragma terminate ' +\n                'body private then if procedure type case in protected constant interface ' +\n                'is raise use declare range delay limited record when delta loop rem while ' +\n                'digits renames with do mod requeue xor',\n            literal:\n                'True False',\n        },\n        contains: [\n            COMMENTS,\n            // strings \"foobar\"\n            {\n                className: 'string',\n                begin: /\"/, end: /\"/,\n                contains: [{begin: /\"\"/, relevance: 0}]\n            },\n            // characters ''\n            {\n                // character literals always contain one char\n                className: 'string',\n                begin: /'.'/\n            },\n            {\n                // number literals\n                className: 'number',\n                begin: NUMBER_RE,\n                relevance: 0\n            },\n            {\n                // Attributes\n                className: 'symbol',\n                begin: \"'\" + ID_REGEX,\n            },\n            {\n                // package definition, maybe inside generic\n                className: 'title',\n                begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?', end: '(is|$)',\n                keywords: 'package body',\n                excludeBegin: true,\n                excludeEnd: true,\n                illegal: BAD_CHARS\n            },\n            {\n                // function/procedure declaration/definition\n                // maybe inside generic\n                begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+', end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n                keywords: 'overriding function procedure with is renames return',\n                // we need to re-match the 'function' keyword, so that\n                // the title mode below matches only exactly once\n                returnBegin: true,\n                contains:\n                [\n                    COMMENTS,\n                    {\n                        // name of the function/procedure\n                        className: 'title',\n                        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n                        end: '(\\\\(|\\\\s+|$)',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        illegal: BAD_CHARS\n                    },\n                    // 'self'\n                    // // parameter types\n                    VAR_DECLS,\n                    {\n                        // return type\n                        className: 'type',\n                        begin: '\\\\breturn\\\\s+', end: '(\\\\s+|;|$)',\n                        keywords: 'return',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        // we are done with functions\n                        endsParent: true,\n                        illegal: BAD_CHARS\n\n                    },\n                ]\n            },\n            {\n                // new type declarations\n                // maybe inside generic\n                className: 'type',\n                begin: '\\\\b(sub)?type\\\\s+', end: '\\\\s+',\n                keywords: 'type',\n                excludeBegin: true,\n                illegal: BAD_CHARS\n            },\n\n            // see comment above the definition\n            VAR_DECLS,\n\n            // no markup\n            // relevance boosters for small snippets\n            // {begin: '\\\\s*=>\\\\s*'},\n            // {begin: '\\\\s*:=\\\\s*'},\n            // {begin: '\\\\s+:=\\\\s+'},\n        ]\n    };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}