{"ast":null,"code":"'use strict';\n\nmodule.exports = http;\nhttp.displayName = 'http';\nhttp.aliases = [];\n\nfunction http(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    }; // Create a mapping of Content-Type headers to language definitions\n\n    var langs = Prism.languages;\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    }; // Declare which types can also be suffixes\n\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    };\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '');\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n      return '(?:' + contentType + '|' + suffixPattern + ')';\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n\n\n    var options;\n\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {};\n        var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n        options[contentType] = {\n          pattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        };\n      }\n    }\n\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options);\n    }\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","http","displayName","aliases","Prism","languages","pattern","inside","property","lookbehind","alias","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","RegExp","rest","insertBefore"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/http.js"],"sourcesContent":["'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function(Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType] = {\n          pattern: RegExp(\n            '(content-type:\\\\s*' +\n              pattern +\n              '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\n            'i'\n          ),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options)\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;EACnB;;EAAC,CAAC,UAASA,KAAT,EAAgB;IAChBA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuB;MACrB,gBAAgB;QACdK,OAAO,EAAE,6FADK;QAEdC,MAAM,EAAE;UACN;UACAC,QAAQ,EAAE,wDAFJ;UAGN;UACA,aAAa;QAJP;MAFM,CADK;MAUrB,mBAAmB;QACjBF,OAAO,EAAE,sBADQ;QAEjBC,MAAM,EAAE;UACN;UACAC,QAAQ,EAAE;YACRF,OAAO,EAAE,wBADD;YAERG,UAAU,EAAE;UAFJ;QAFJ;MAFS,CAVE;MAoBrB;MACA,eAAe;QACbH,OAAO,EAAE,gBADI;QAEbI,KAAK,EAAE;MAFM;IArBM,CAAvB,CADgB,CA0Bd;;IACF,IAAIC,KAAK,GAAGP,KAAK,CAACC,SAAlB;IACA,IAAIO,aAAa,GAAG;MAClB,0BAA0BD,KAAK,CAACE,UADd;MAElB,oBAAoBF,KAAK,CAACG,IAAN,IAAcH,KAAK,CAACE,UAFtB;MAGlB,mBAAmBF,KAAK,CAACI,GAHP;MAIlB,YAAYJ,KAAK,CAACI,GAJA;MAKlB,aAAaJ,KAAK,CAACK,IALD;MAMlB,YAAYL,KAAK,CAACM;IANA,CAApB,CA5BgB,CAmCd;;IACF,IAAIC,WAAW,GAAG;MAChB,oBAAoB,IADJ;MAEhB,mBAAmB;IAFH,CAAlB;IAIA;AACJ;AACA;AACA;AACA;AACA;;IACI,SAASC,gBAAT,CAA0BC,WAA1B,EAAuC;MACrC,IAAIC,MAAM,GAAGD,WAAW,CAACE,OAAZ,CAAoB,WAApB,EAAiC,EAAjC,CAAb;MACA,IAAIC,aAAa,GAAG,0BAA0BF,MAA1B,GAAmC,cAAvD;MACA,OAAO,QAAQD,WAAR,GAAsB,GAAtB,GAA4BG,aAA5B,GAA4C,GAAnD;IACD,CAlDe,CAkDd;IACF;;;IACA,IAAIC,OAAJ;;IACA,KAAK,IAAIJ,WAAT,IAAwBR,aAAxB,EAAuC;MACrC,IAAIA,aAAa,CAACQ,WAAD,CAAjB,EAAgC;QAC9BI,OAAO,GAAGA,OAAO,IAAI,EAArB;QACA,IAAIlB,OAAO,GAAGY,WAAW,CAACE,WAAD,CAAX,GACVD,gBAAgB,CAACC,WAAD,CADN,GAEVA,WAFJ;QAGAI,OAAO,CAACJ,WAAD,CAAP,GAAuB;UACrBd,OAAO,EAAEmB,MAAM,CACb,uBACEnB,OADF,GAEE,wCAHW,EAIb,GAJa,CADM;UAOrBG,UAAU,EAAE,IAPS;UAQrBF,MAAM,EAAE;YACNmB,IAAI,EAAEd,aAAa,CAACQ,WAAD;UADb;QARa,CAAvB;MAYD;IACF;;IACD,IAAII,OAAJ,EAAa;MACXpB,KAAK,CAACC,SAAN,CAAgBsB,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoDH,OAApD;IACD;EACF,CA5EA,EA4EEpB,KA5EF;AA6EF"},"metadata":{},"sourceType":"script"}