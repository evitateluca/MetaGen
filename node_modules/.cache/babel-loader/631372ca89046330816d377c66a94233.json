{"ast":null,"code":"'use strict';\n\nmodule.exports = markup;\nmarkup.displayName = 'markup';\nmarkup.aliases = ['xml', 'html', 'mathml', 'svg'];\n\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: /<!--[\\s\\S]*?-->/,\n    prolog: /<\\?[\\s\\S]+?\\?>/,\n    doctype: /<!DOCTYPE[\\s\\S]+?>/i,\n    cdata: /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/i,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n          inside: {\n            punctuation: [/^=/, {\n              pattern: /^(\\s*)[\"']|[\"']$/,\n              lookbehind: true\n            }]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: /&#?[\\da-z]{1,8};/i\n  };\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n    }\n  });\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {};\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      };\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      };\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      };\n      var def = {};\n      def[tagName] = {\n        pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      };\n      Prism.languages.insertBefore('markup', 'cdata', def);\n    }\n  });\n  Prism.languages.xml = Prism.languages.extend('markup', {});\n  Prism.languages.html = Prism.languages.markup;\n  Prism.languages.mathml = Prism.languages.markup;\n  Prism.languages.svg = Prism.languages.markup;\n}","map":{"version":3,"names":["module","exports","markup","displayName","aliases","Prism","languages","comment","prolog","doctype","cdata","tag","pattern","greedy","inside","punctuation","namespace","lookbehind","entity","hooks","add","env","type","attributes","content","value","replace","Object","defineProperty","addInlined","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","xml","extend","html","mathml","svg"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/markup.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markup\nmarkup.displayName = 'markup'\nmarkup.aliases = ['xml', 'html', 'mathml', 'svg']\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: /<!--[\\s\\S]*?-->/,\n    prolog: /<\\?[\\s\\S]+?\\?>/,\n    doctype: /<!DOCTYPE[\\s\\S]+?>/i,\n    cdata: /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/i,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n          inside: {\n            punctuation: [\n              /^=/,\n              {\n                pattern: /^(\\s*)[\"']|[\"']$/,\n                lookbehind: true\n              }\n            ]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: /&#?[\\da-z]{1,8};/i\n  }\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n    Prism.languages.markup['entity'] // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function(env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {}\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      }\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      }\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      }\n      var def = {}\n      def[tagName] = {\n        pattern: RegExp(\n          /(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(\n            /__/g,\n            tagName\n          ),\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      }\n      Prism.languages.insertBefore('markup', 'cdata', def)\n    }\n  })\n  Prism.languages.xml = Prism.languages.extend('markup', {})\n  Prism.languages.html = Prism.languages.markup\n  Prism.languages.mathml = Prism.languages.markup\n  Prism.languages.svg = Prism.languages.markup\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}