{"ast":null,"code":"'use strict';\n\nmodule.exports = regex;\nregex.displayName = 'regex';\nregex.aliases = [];\n\nfunction regex(Prism) {\n  ;\n\n  (function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    };\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;\n    var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i;\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    };\n    var backreference = [/\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\n    {\n      pattern: /\\\\k<[^<>']+>/,\n      inside: {\n        'group-name': groupName\n      }\n    }];\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true\n          },\n          'charset-punctuation': /^\\[|\\]$/,\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': /-/\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClass,\n          backreference: backreference,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: backreference,\n      anchor: /[$^]|\\\\[ABbGZz]/,\n      escape: escape,\n      group: [{\n        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n        pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n        inside: {\n          'group-name': groupName\n        }\n      }, /\\)/],\n      quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n      alternation: /\\|/\n    };\n    ['actionscript', 'coffescript', 'flow', 'javascript', 'typescript', 'vala'].forEach(function (lang) {\n      var grammar = Prism.languages[lang];\n\n      if (grammar) {\n        grammar['regex'].inside = {\n          'regex-flags': /[a-z]+$/,\n          'regex-delimiter': /^\\/|\\/$/,\n          'language-regex': {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.regex\n          }\n        };\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","regex","displayName","aliases","Prism","specialEscape","pattern","alias","escape","charClass","rangeChar","source","range","RegExp","groupName","lookbehind","backreference","inside","languages","charset","charclass","anchor","group","quantifier","alternation","forEach","lang","grammar"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/regex.js"],"sourcesContent":["'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function(Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/\n    var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    var backreference = [\n      /\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\n      {\n        pattern: /\\\\k<[^<>']+>/,\n        inside: {\n          'group-name': groupName\n        }\n      }\n    ]\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true\n          },\n          'charset-punctuation': /^\\[|\\]$/,\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': /-/\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClass,\n          backreference: backreference,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: backreference,\n      anchor: /[$^]|\\\\[ABbGZz]/,\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          inside: {\n            'group-name': groupName\n          }\n        },\n        /\\)/\n      ],\n      quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n      alternation: /\\|/\n    }\n    ;[\n      'actionscript',\n      'coffescript',\n      'flow',\n      'javascript',\n      'typescript',\n      'vala'\n    ].forEach(function(lang) {\n      var grammar = Prism.languages[lang]\n      if (grammar) {\n        grammar['regex'].inside = {\n          'regex-flags': /[a-z]+$/,\n          'regex-delimiter': /^\\/|\\/$/,\n          'language-regex': {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.regex\n          }\n        }\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;EACpB;;EAAC,CAAC,UAASA,KAAT,EAAgB;IAChB,IAAIC,aAAa,GAAG;MAClBC,OAAO,EAAE,sBADS;MAElBC,KAAK,EAAE;IAFW,CAApB;IAIA,IAAIC,MAAM,GAAG,4FAAb;IACA,IAAIC,SAAS,GAAG,yBAAhB;IACA,IAAIC,SAAS,GAAG,iBAAiBF,MAAM,CAACG,MAAxB,GAAiC,GAAjD;IACA,IAAIC,KAAK,GAAGC,MAAM,CAACH,SAAS,GAAG,GAAZ,GAAkBA,SAAnB,CAAlB,CARgB,CAQgC;;IAChD,IAAII,SAAS,GAAG;MACdR,OAAO,EAAE,uBADK;MAEdS,UAAU,EAAE,IAFE;MAGdR,KAAK,EAAE;IAHO,CAAhB;IAKA,IAAIS,aAAa,GAAG,CAClB,0BADkB,EACU;IAC5B;MACEV,OAAO,EAAE,cADX;MAEEW,MAAM,EAAE;QACN,cAAcH;MADR;IAFV,CAFkB,CAApB;IASAV,KAAK,CAACc,SAAN,CAAgBjB,KAAhB,GAAwB;MACtBkB,OAAO,EAAE;QACPb,OAAO,EAAE,iDADF;QAEPS,UAAU,EAAE,IAFL;QAGPE,MAAM,EAAE;UACN,oBAAoB;YAClBX,OAAO,EAAE,SADS;YAElBS,UAAU,EAAE;UAFM,CADd;UAKN,uBAAuB,SALjB;UAMNH,KAAK,EAAE;YACLN,OAAO,EAAEM,KADJ;YAELK,MAAM,EAAE;cACNT,MAAM,EAAEA,MADF;cAEN,qBAAqB;YAFf;UAFH,CAND;UAaN,kBAAkBH,aAbZ;UAcNe,SAAS,EAAEX,SAdL;UAeNO,aAAa,EAAEA,aAfT;UAgBNR,MAAM,EAAEA;QAhBF;MAHD,CADa;MAuBtB,kBAAkBH,aAvBI;MAwBtBe,SAAS,EAAEX,SAxBW;MAyBtBO,aAAa,EAAEA,aAzBO;MA0BtBK,MAAM,EAAE,iBA1Bc;MA2BtBb,MAAM,EAAEA,MA3Bc;MA4BtBc,KAAK,EAAE,CACL;QACE;QACA;QACA;QACAhB,OAAO,EAAE,6EAJX;QAKEW,MAAM,EAAE;UACN,cAAcH;QADR;MALV,CADK,EAUL,IAVK,CA5Be;MAwCtBS,UAAU,EAAE,wBAxCU;MAyCtBC,WAAW,EAAE;IAzCS,CAAxB;IA2CC,CACC,cADD,EAEC,aAFD,EAGC,MAHD,EAIC,YAJD,EAKC,YALD,EAMC,MAND,EAOCC,OAPD,CAOS,UAASC,IAAT,EAAe;MACvB,IAAIC,OAAO,GAAGvB,KAAK,CAACc,SAAN,CAAgBQ,IAAhB,CAAd;;MACA,IAAIC,OAAJ,EAAa;QACXA,OAAO,CAAC,OAAD,CAAP,CAAiBV,MAAjB,GAA0B;UACxB,eAAe,SADS;UAExB,mBAAmB,SAFK;UAGxB,kBAAkB;YAChBX,OAAO,EAAE,SADO;YAEhBW,MAAM,EAAEb,KAAK,CAACc,SAAN,CAAgBjB;UAFR;QAHM,CAA1B;MAQD;IACF,CAnBA;EAoBF,CAtFA,EAsFEG,KAtFF;AAuFF"},"metadata":{},"sourceType":"script"}