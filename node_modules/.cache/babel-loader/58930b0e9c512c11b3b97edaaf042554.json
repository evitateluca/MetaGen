{"ast":null,"code":"'use strict';\n\nmodule.exports = lilypond;\nlilypond.displayName = 'lilypond';\nlilypond.aliases = [];\n\nfunction lilypond(Prism) {\n  ;\n\n  (function (Prism) {\n    var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/.source; // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n\n    var recursivenessLog2 = 5;\n\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, schemeExpression);\n    }\n\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source);\n    var lilypond = Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(/(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(/<expr>/g, schemeExpression), 'm'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    };\n    lilypond['embedded-scheme'].inside['scheme'].inside['embedded-lilypond'].inside['lilypond'].inside = lilypond;\n    Prism.languages.ly = lilypond;\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","lilypond","displayName","aliases","Prism","schemeExpression","source","recursivenessLog2","i","replace","languages","comment","pattern","RegExp","lookbehind","greedy","inside","scheme","alias","punctuation","rest","string","keyword","operator","number","ly"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/lilypond.js"],"sourcesContent":["'use strict'\n\nmodule.exports = lilypond\nlilypond.displayName = 'lilypond'\nlilypond.aliases = []\nfunction lilypond(Prism) {\n  ;(function(Prism) {\n    var schemeExpression = /\\((?:[^();\"#\\\\]|\\\\[\\s\\S]|;.*|\"(?:[^\"\\\\]|\\\\.)*\"|#(?:\\{(?:(?!#\\})[\\s\\S])*#\\}|[^{])|<expr>)*\\)/\n      .source // allow for up to pow(2, recursivenessLog2) many levels of recursive brace expressions\n    // For some reason, this can't be 4\n    var recursivenessLog2 = 5\n    for (var i = 0; i < recursivenessLog2; i++) {\n      schemeExpression = schemeExpression.replace(/<expr>/g, schemeExpression)\n    }\n    schemeExpression = schemeExpression.replace(/<expr>/g, /[^\\s\\S]/.source)\n    var lilypond = (Prism.languages.lilypond = {\n      comment: /%(?:(?!\\{).*|\\{[\\s\\S]*?%\\})/,\n      'embedded-scheme': {\n        pattern: RegExp(\n          /(^|[=\\s])#(?:\"(?:[^\"\\\\]|\\\\.)*\"|[^\\s()\"]*(?:[^\\s()]|<expr>))/.source.replace(\n            /<expr>/g,\n            schemeExpression\n          ),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          scheme: {\n            pattern: /^(#)[\\s\\S]+$/,\n            lookbehind: true,\n            alias: 'language-scheme',\n            inside: {\n              'embedded-lilypond': {\n                pattern: /#\\{[\\s\\S]*?#\\}/,\n                greedy: true,\n                inside: {\n                  punctuation: /^#\\{|#\\}$/,\n                  lilypond: {\n                    pattern: /[\\s\\S]+/,\n                    alias: 'language-lilypond',\n                    inside: null // see below\n                  }\n                }\n              },\n              rest: Prism.languages.scheme\n            }\n          },\n          punctuation: /#/\n        }\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true\n      },\n      'class-name': {\n        pattern: /(\\\\new\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      keyword: {\n        pattern: /\\\\[a-z][-\\w]*/i,\n        inside: {\n          punctuation: /^\\\\/\n        }\n      },\n      operator: /[=|]|<<|>>/,\n      punctuation: {\n        pattern: /(^|[a-z\\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\\d))|[_^]\\.?|[.!])|[{}()[\\]<>^~]|\\\\[()[\\]<>\\\\!]|--|__/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\/\\d+)?\\b/\n    })\n    lilypond['embedded-scheme'].inside['scheme'].inside[\n      'embedded-lilypond'\n    ].inside['lilypond'].inside = lilypond\n    Prism.languages.ly = lilypond\n  })(Prism)\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,QAAjB;AACAA,QAAQ,CAACC,WAAT,GAAuB,UAAvB;AACAD,QAAQ,CAACE,OAAT,GAAmB,EAAnB;;AACA,SAASF,QAAT,CAAkBG,KAAlB,EAAyB;EACvB;;EAAC,CAAC,UAASA,KAAT,EAAgB;IAChB,IAAIC,gBAAgB,GAAG,8FACpBC,MADH,CADgB,CAEN;IACV;;IACA,IAAIC,iBAAiB,GAAG,CAAxB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,iBAApB,EAAuCC,CAAC,EAAxC,EAA4C;MAC1CH,gBAAgB,GAAGA,gBAAgB,CAACI,OAAjB,CAAyB,SAAzB,EAAoCJ,gBAApC,CAAnB;IACD;;IACDA,gBAAgB,GAAGA,gBAAgB,CAACI,OAAjB,CAAyB,SAAzB,EAAoC,UAAUH,MAA9C,CAAnB;IACA,IAAIL,QAAQ,GAAIG,KAAK,CAACM,SAAN,CAAgBT,QAAhB,GAA2B;MACzCU,OAAO,EAAE,6BADgC;MAEzC,mBAAmB;QACjBC,OAAO,EAAEC,MAAM,CACb,8DAA8DP,MAA9D,CAAqEG,OAArE,CACE,SADF,EAEEJ,gBAFF,CADa,EAKb,GALa,CADE;QAQjBS,UAAU,EAAE,IARK;QASjBC,MAAM,EAAE,IATS;QAUjBC,MAAM,EAAE;UACNC,MAAM,EAAE;YACNL,OAAO,EAAE,cADH;YAENE,UAAU,EAAE,IAFN;YAGNI,KAAK,EAAE,iBAHD;YAINF,MAAM,EAAE;cACN,qBAAqB;gBACnBJ,OAAO,EAAE,gBADU;gBAEnBG,MAAM,EAAE,IAFW;gBAGnBC,MAAM,EAAE;kBACNG,WAAW,EAAE,WADP;kBAENlB,QAAQ,EAAE;oBACRW,OAAO,EAAE,SADD;oBAERM,KAAK,EAAE,mBAFC;oBAGRF,MAAM,EAAE,IAHA,CAGK;;kBAHL;gBAFJ;cAHW,CADf;cAaNI,IAAI,EAAEhB,KAAK,CAACM,SAAN,CAAgBO;YAbhB;UAJF,CADF;UAqBNE,WAAW,EAAE;QArBP;MAVS,CAFsB;MAoCzCE,MAAM,EAAE;QACNT,OAAO,EAAE,mBADH;QAENG,MAAM,EAAE;MAFF,CApCiC;MAwCzC,cAAc;QACZH,OAAO,EAAE,kBADG;QAEZE,UAAU,EAAE;MAFA,CAxC2B;MA4CzCQ,OAAO,EAAE;QACPV,OAAO,EAAE,gBADF;QAEPI,MAAM,EAAE;UACNG,WAAW,EAAE;QADP;MAFD,CA5CgC;MAkDzCI,QAAQ,EAAE,YAlD+B;MAmDzCJ,WAAW,EAAE;QACXP,OAAO,EAAE,sGADE;QAEXE,UAAU,EAAE;MAFD,CAnD4B;MAuDzCU,MAAM,EAAE;IAvDiC,CAA3C;IAyDAvB,QAAQ,CAAC,iBAAD,CAAR,CAA4Be,MAA5B,CAAmC,QAAnC,EAA6CA,MAA7C,CACE,mBADF,EAEEA,MAFF,CAES,UAFT,EAEqBA,MAFrB,GAE8Bf,QAF9B;IAGAG,KAAK,CAACM,SAAN,CAAgBe,EAAhB,GAAqBxB,QAArB;EACD,CAtEA,EAsEEG,KAtEF;AAuEF"},"metadata":{},"sourceType":"script"}