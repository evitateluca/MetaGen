{"ast":null,"code":"'use strict';\n\nmodule.exports = groovy;\ngroovy.displayName = 'groovy';\ngroovy.aliases = [];\n\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    keyword: /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    string: [{\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,\n      greedy: true\n    }, {\n      pattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    }],\n    number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  });\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n  });\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    }\n  }); // Handle string interpolation\n\n  Prism.hooks.add('wrap', function (env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0];\n\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/;\n        } // To prevent double HTML-encoding we have to decode env.content first\n\n\n        env.content.value = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        });\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring');\n      }\n    }\n  });\n}","map":{"version":3,"names":["module","exports","groovy","displayName","aliases","Prism","languages","extend","keyword","string","pattern","greedy","number","operator","lookbehind","punctuation","insertBefore","shebang","alias","annotation","hooks","add","env","language","type","delimiter","content","value","replace","highlight","expression","inside","classes","push"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/groovy.js"],"sourcesContent":["'use strict'\n\nmodule.exports = groovy\ngroovy.displayName = 'groovy'\ngroovy.aliases = []\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    keyword: /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    string: [\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,\n        greedy: true\n      },\n      {\n        pattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      }\n    ],\n    number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  })\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  })\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n  })\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    }\n  }) // Handle string interpolation\n  Prism.hooks.add('wrap', function(env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0]\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        } // To prevent double HTML-encoding we have to decode env.content first\n        env.content.value = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        })\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring')\n      }\n    }\n  })\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACrBA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;IACvDC,OAAO,EAAE,4WAD8C;IAEvDC,MAAM,EAAE,CACN;MACEC,OAAO,EAAE,qDADX;MAEEC,MAAM,EAAE;IAFV,CADM,EAKN;MACED,OAAO,EAAE,oCADX;MAEEC,MAAM,EAAE;IAFV,CALM,CAF+C;IAYvDC,MAAM,EAAE,8FAZ+C;IAavDC,QAAQ,EAAE;MACRH,OAAO,EAAE,sJADD;MAERI,UAAU,EAAE;IAFJ,CAb6C;IAiBvDC,WAAW,EAAE;EAjB0C,CAAhC,CAAzB;EAmBAV,KAAK,CAACC,SAAN,CAAgBU,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;IAC/CC,OAAO,EAAE;MACPP,OAAO,EAAE,MADF;MAEPQ,KAAK,EAAE;IAFA;EADsC,CAAjD;EAMAb,KAAK,CAACC,SAAN,CAAgBU,YAAhB,CAA6B,QAA7B,EAAuC,aAAvC,EAAsD;IACpD,eAAe;EADqC,CAAtD;EAGAX,KAAK,CAACC,SAAN,CAAgBU,YAAhB,CAA6B,QAA7B,EAAuC,UAAvC,EAAmD;IACjDG,UAAU,EAAE;MACVD,KAAK,EAAE,aADG;MAEVR,OAAO,EAAE,cAFC;MAGVI,UAAU,EAAE;IAHF;EADqC,CAAnD,EA7BqB,CAmClB;;EACHT,KAAK,CAACe,KAAN,CAAYC,GAAZ,CAAgB,MAAhB,EAAwB,UAASC,GAAT,EAAc;IACpC,IAAIA,GAAG,CAACC,QAAJ,KAAiB,QAAjB,IAA6BD,GAAG,CAACE,IAAJ,KAAa,QAA9C,EAAwD;MACtD,IAAIC,SAAS,GAAGH,GAAG,CAACI,OAAJ,CAAYC,KAAZ,CAAkB,CAAlB,CAAhB;;MACA,IAAIF,SAAS,IAAI,GAAjB,EAAsB;QACpB,IAAIf,OAAO,GAAG,iCAAd;;QACA,IAAIe,SAAS,KAAK,GAAlB,EAAuB;UACrBf,OAAO,GAAG,iCAAV;QACD,CAJmB,CAIlB;;;QACFY,GAAG,CAACI,OAAJ,CAAYC,KAAZ,GAAoBL,GAAG,CAACI,OAAJ,CAAYC,KAAZ,CACjBC,OADiB,CACT,OADS,EACA,GADA,EAEjBA,OAFiB,CAET,QAFS,EAEC,GAFD,CAApB;QAGAN,GAAG,CAACI,OAAJ,GAAcrB,KAAK,CAACwB,SAAN,CAAgBP,GAAG,CAACI,OAAJ,CAAYC,KAA5B,EAAmC;UAC/CG,UAAU,EAAE;YACVpB,OAAO,EAAEA,OADC;YAEVI,UAAU,EAAE,IAFF;YAGViB,MAAM,EAAE1B,KAAK,CAACC,SAAN,CAAgBJ;UAHd;QADmC,CAAnC,CAAd;QAOAoB,GAAG,CAACU,OAAJ,CAAYC,IAAZ,CAAiBR,SAAS,KAAK,GAAd,GAAoB,OAApB,GAA8B,SAA/C;MACD;IACF;EACF,CArBD;AAsBD"},"metadata":{},"sourceType":"script"}