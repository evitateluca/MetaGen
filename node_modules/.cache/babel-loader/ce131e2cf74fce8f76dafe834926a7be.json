{"ast":null,"code":"'use strict';\n\nmodule.exports = batch;\nbatch.displayName = 'batch';\nbatch.aliases = [];\n\nfunction batch(Prism) {\n  ;\n\n  (function (Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/;\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    };\n    var string = /\"[^\"]*\"/;\n    var number = /(?:\\b|-)\\d+\\b/;\n    Prism.languages.batch = {\n      comment: [/^::.*/m, {\n        pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true\n      }],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [{\n        // FOR command\n        pattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^for\\b|\\b(?:in|do)\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: variable,\n          number: number,\n          punctuation: /[()',]/\n        }\n      }, {\n        // IF command\n        pattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: variable,\n          number: number,\n          operator: /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i\n        }\n      }, {\n        // ELSE command\n        pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^else\\b/i\n        }\n      }, {\n        // SET command\n        pattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^set\\b/i,\n          string: string,\n          parameter: parameter,\n          variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n          number: number,\n          operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n          punctuation: /[()',]/\n        }\n      }, {\n        // Other commands\n        pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\w+\\b/i,\n          string: string,\n          parameter: parameter,\n          label: {\n            pattern: /(^\\s*):\\S+/m,\n            lookbehind: true,\n            alias: 'property'\n          },\n          variable: variable,\n          number: number,\n          operator: /\\^/\n        }\n      }],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    };\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","batch","displayName","aliases","Prism","variable","parameter","pattern","alias","inside","punctuation","string","number","languages","comment","lookbehind","label","command","keyword","operator"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/batch.js"],"sourcesContent":["'use strict'\n\nmodule.exports = batch\nbatch.displayName = 'batch'\nbatch.aliases = []\nfunction batch(Prism) {\n  ;(function(Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    }\n    var string = /\"[^\"]*\"/\n    var number = /(?:\\b|-)\\d+\\b/\n    Prism.languages.batch = {\n      comment: [\n        /^::.*/m,\n        {\n          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true\n        }\n      ],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [\n        {\n          // FOR command\n          pattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^for\\b|\\b(?:in|do)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // IF command\n          pattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            operator: /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i\n          }\n        },\n        {\n          // ELSE command\n          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^else\\b/i\n          }\n        },\n        {\n          // SET command\n          pattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^set\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n            number: number,\n            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // Other commands\n          pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^\\w+\\b/i,\n            string: string,\n            parameter: parameter,\n            label: {\n              pattern: /(^\\s*):\\S+/m,\n              lookbehind: true,\n              alias: 'property'\n            },\n            variable: variable,\n            number: number,\n            operator: /\\^/\n          }\n        }\n      ],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;EACpB;;EAAC,CAAC,UAASA,KAAT,EAAgB;IAChB,IAAIC,QAAQ,GAAG,oBAAf;IACA,IAAIC,SAAS,GAAG;MACdC,OAAO,EAAE,8CADK;MAEdC,KAAK,EAAE,WAFO;MAGdC,MAAM,EAAE;QACNC,WAAW,EAAE;MADP;IAHM,CAAhB;IAOA,IAAIC,MAAM,GAAG,SAAb;IACA,IAAIC,MAAM,GAAG,eAAb;IACAR,KAAK,CAACS,SAAN,CAAgBZ,KAAhB,GAAwB;MACtBa,OAAO,EAAE,CACP,QADO,EAEP;QACEP,OAAO,EAAE,4DADX;QAEEQ,UAAU,EAAE;MAFd,CAFO,CADa;MAQtBC,KAAK,EAAE;QACLT,OAAO,EAAE,OADJ;QAELC,KAAK,EAAE;MAFF,CARe;MAYtBS,OAAO,EAAE,CACP;QACE;QACAV,OAAO,EAAE,oFAFX;QAGEQ,UAAU,EAAE,IAHd;QAIEN,MAAM,EAAE;UACNS,OAAO,EAAE,uBADH;UAENP,MAAM,EAAEA,MAFF;UAGNL,SAAS,EAAEA,SAHL;UAIND,QAAQ,EAAEA,QAJJ;UAKNO,MAAM,EAAEA,MALF;UAMNF,WAAW,EAAE;QANP;MAJV,CADO,EAcP;QACE;QACAH,OAAO,EAAE,uMAFX;QAGEQ,UAAU,EAAE,IAHd;QAIEN,MAAM,EAAE;UACNS,OAAO,EAAE,2DADH;UAENP,MAAM,EAAEA,MAFF;UAGNL,SAAS,EAAEA,SAHL;UAIND,QAAQ,EAAEA,QAJJ;UAKNO,MAAM,EAAEA,MALF;UAMNO,QAAQ,EAAE;QANJ;MAJV,CAdO,EA2BP;QACE;QACAZ,OAAO,EAAE,6BAFX;QAGEQ,UAAU,EAAE,IAHd;QAIEN,MAAM,EAAE;UACNS,OAAO,EAAE;QADH;MAJV,CA3BO,EAmCP;QACE;QACAX,OAAO,EAAE,iGAFX;QAGEQ,UAAU,EAAE,IAHd;QAIEN,MAAM,EAAE;UACNS,OAAO,EAAE,SADH;UAENP,MAAM,EAAEA,MAFF;UAGNL,SAAS,EAAEA,SAHL;UAIND,QAAQ,EAAE,CAACA,QAAD,EAAW,iCAAX,CAJJ;UAKNO,MAAM,EAAEA,MALF;UAMNO,QAAQ,EAAE,iCANJ;UAONT,WAAW,EAAE;QAPP;MAJV,CAnCO,EAiDP;QACE;QACAH,OAAO,EAAE,8DAFX;QAGEQ,UAAU,EAAE,IAHd;QAIEN,MAAM,EAAE;UACNS,OAAO,EAAE,SADH;UAENP,MAAM,EAAEA,MAFF;UAGNL,SAAS,EAAEA,SAHL;UAINU,KAAK,EAAE;YACLT,OAAO,EAAE,aADJ;YAELQ,UAAU,EAAE,IAFP;YAGLP,KAAK,EAAE;UAHF,CAJD;UASNH,QAAQ,EAAEA,QATJ;UAUNO,MAAM,EAAEA,MAVF;UAWNO,QAAQ,EAAE;QAXJ;MAJV,CAjDO,CAZa;MAgFtBA,QAAQ,EAAE,MAhFY;MAiFtBT,WAAW,EAAE;IAjFS,CAAxB;EAmFD,CA9FA,EA8FEN,KA9FF;AA+FF"},"metadata":{},"sourceType":"script"}