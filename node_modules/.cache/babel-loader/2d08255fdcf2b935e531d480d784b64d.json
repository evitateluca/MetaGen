{"ast":null,"code":"module.exports = function (hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n  var STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/\n    }, {\n      begin: '\\'\\\\\\\\?.',\n      end: '\\'',\n      illegal: '.'\n    }]\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<[^\\n>]*>/,\n      end: /$/,\n      illegal: '\\\\n'\n    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignof constexpr decltype ' + 'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and or not',\n    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n    literal: 'true false nullptr NULL'\n  };\n  var EXPRESSION_CONTAINS = [CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([PREPROCESSOR, {\n      begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      // This mode covers expression context where we can't expect a function\n      // definition and shouldn't highlight anything that looks like one:\n      // `return some()`, `else if()`, `(x*sum(1, 2))`\n      variants: [{\n        begin: /=/,\n        end: /;/\n      }, {\n        begin: /\\(/,\n        end: /\\)/\n      }, {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }],\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat([{\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat(['self']),\n        relevance: 0\n      }]),\n      relevance: 0\n    }, {\n      className: 'function',\n      begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n      returnBegin: true,\n      end: /[{;=]/,\n      excludeEnd: true,\n      keywords: CPP_KEYWORDS,\n      illegal: /[^\\w\\s\\*&]/,\n      contains: [{\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [hljs.TITLE_MODE],\n        relevance: 0\n      }, {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          keywords: CPP_KEYWORDS,\n          relevance: 0,\n          contains: ['self', hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n        }]\n      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n    }, {\n      className: 'class',\n      beginKeywords: 'class struct',\n      end: /[{;:]/,\n      contains: [{\n        begin: /</,\n        end: />/,\n        contains: ['self']\n      }, // skip generic stuff\n      hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};","map":{"version":3,"names":["module","exports","hljs","CPP_PRIMITIVE_TYPES","className","begin","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","FUNCTION_TITLE","IDENT_RE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","aliases","concat","beginKeywords","returnBegin","excludeEnd","TITLE_MODE","preprocessor","strings"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/react-syntax-highlighter/node_modules/highlight.js/lib/languages/cpp.js"],"sourcesContent":["module.exports = function(hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ },\n      {\n        begin: '\\'\\\\\\\\?.', end: '\\'',\n        illegal: '.'\n      }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<[^\\n>]*>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignof constexpr decltype ' +\n      'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and or not',\n    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([\n      PREPROCESSOR,\n      {\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n          {begin: /=/, end: /;/},\n          {begin: /\\(/, end: /\\)/},\n          {beginKeywords: 'new throw return else', end: /;/}\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            contains: EXPRESSION_CONTAINS.concat(['self']),\n            relevance: 0\n          }\n        ]),\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n        returnBegin: true, end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&]/,\n        contains: [\n          {\n            begin: FUNCTION_TITLE, returnBegin: true,\n            contains: [hljs.TITLE_MODE],\n            relevance: 0\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES,\n              // Count matching parentheses.\n              {\n                begin: /\\(/, end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                  'self',\n                  hljs.C_LINE_COMMENT_MODE,\n                  hljs.C_BLOCK_COMMENT_MODE,\n                  STRINGS,\n                  NUMBERS,\n                  CPP_PRIMITIVE_TYPES\n                ]\n              }\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          PREPROCESSOR\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}