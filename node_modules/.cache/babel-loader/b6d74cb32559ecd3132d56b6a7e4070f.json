{"ast":null,"code":"'use strict';\n\nvar high = require('highlight.js/lib/highlight.js');\n\nvar fault = require('fault'); // The lowlight interface, which has to be compatible with highlight.js, as\n// this object is passed to highlight.js syntaxes.\n\n\nfunction High() {}\n\nHigh.prototype = high; // Expose.\n\nvar low = new High(); // Ha!\n\nmodule.exports = low;\nlow.highlight = highlight;\nlow.highlightAuto = autoHighlight;\nlow.registerLanguage = registerLanguage;\nlow.listLanguages = listLanguages;\nlow.registerAlias = registerAlias;\nlow.getLanguage = getLanguage;\nvar inherit = high.inherit;\nvar own = {}.hasOwnProperty;\nvar concat = [].concat;\nvar defaultPrefix = 'hljs-';\nvar keyInsensitive = 'case_insensitive';\nvar keyCachedVariants = 'cached_variants';\nvar space = ' ';\nvar verticalBar = '|'; // Maps of syntaxes.\n\nvar languageNames = [];\nvar languages = {};\nvar aliases = {}; // Highlighting with language detection.\n// Accepts a string with the code to highlight.\n// Returns an object with the following properties:\n//\n// *   `language` — Detected language\n// *   `relevance` — Integer\n// *   `value` — HAST tree with highlighting markup\n// *   `secondBest` — Object with the same structure for second-best\n//     heuristically detected language, may be absent.\n\nfunction autoHighlight(value, options) {\n  var settings = options || {};\n  var subset = settings.subset || languageNames;\n  var prefix = settings.prefix;\n  var length = subset.length;\n  var index = -1;\n  var result;\n  var secondBest;\n  var current;\n  var name;\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value);\n  }\n\n  secondBest = normalize({});\n  result = normalize({});\n\n  while (++index < length) {\n    name = subset[index];\n\n    if (!getLanguage(name)) {\n      continue;\n    }\n\n    current = normalize(coreHighlight(name, value, false, prefix));\n    current.language = name;\n\n    if (current.relevance > secondBest.relevance) {\n      secondBest = current;\n    }\n\n    if (current.relevance > result.relevance) {\n      secondBest = result;\n      result = current;\n    }\n  }\n\n  if (secondBest.language) {\n    result.secondBest = secondBest;\n  }\n\n  return result;\n} // Highlighting `value` in the language `language`.\n\n\nfunction highlight(language, value, options) {\n  var settings = options || {};\n  var prefix = settings.prefix;\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n\n  return normalize(coreHighlight(language, value, true, prefix));\n} // Register a language.\n\n\nfunction registerLanguage(name, syntax) {\n  var lang = syntax(low);\n  languages[name] = lang;\n  languageNames.push(name);\n\n  if (lang.aliases) {\n    registerAlias(name, lang.aliases);\n  }\n} // Get a list of all registered languages.\n\n\nfunction listLanguages() {\n  return languageNames.concat();\n} // Register more aliases for an already registered language.\n\n\nfunction registerAlias(name, alias) {\n  var map = name;\n  var key;\n  var list;\n  var length;\n  var index;\n\n  if (alias) {\n    map = {};\n    map[name] = alias;\n  }\n\n  for (key in map) {\n    list = map[key];\n    list = typeof list === 'string' ? [list] : list;\n    length = list.length;\n    index = -1;\n\n    while (++index < length) {\n      aliases[list[index]] = key;\n    }\n  }\n} // Core highlighting function.\n// Accepts a language name, or an alias, and a string with the code to\n// highlight.\n// eslint-disable-next-line max-params\n\n\nfunction coreHighlight(name, value, ignore, prefix, continuation) {\n  var continuations = {};\n  var stack = [];\n  var modeBuffer = '';\n  var relevance = 0;\n  var language;\n  var top;\n  var current;\n  var currentChildren;\n  var offset;\n  var count;\n  var match;\n  var children;\n\n  if (typeof name !== 'string') {\n    throw fault('Expected `string` for name, got `%s`', name);\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value);\n  }\n\n  language = getLanguage(name);\n  top = continuation || language;\n  children = [];\n  current = top;\n  currentChildren = children;\n\n  if (!language) {\n    throw fault('Unknown language: `%s` is not registered', name);\n  }\n\n  compileLanguage(language);\n\n  try {\n    top.terminators.lastIndex = 0;\n    offset = 0;\n    match = top.terminators.exec(value);\n\n    while (match) {\n      count = processLexeme(value.substring(offset, match.index), match[0]);\n      offset = match.index + count;\n      top.terminators.lastIndex = offset;\n      match = top.terminators.exec(value);\n    }\n\n    processLexeme(value.substr(offset));\n    current = top;\n\n    while (current.parent) {\n      if (current.className) {\n        pop();\n      }\n\n      current = current.parent;\n    }\n\n    return {\n      relevance: relevance,\n      value: currentChildren,\n      language: name,\n      top: top\n    };\n  } catch (error) {\n    /* istanbul ignore if - Catch-all  */\n    if (error.message.indexOf('Illegal') === -1) {\n      throw error;\n    }\n\n    return {\n      relevance: 0,\n      value: addText(value, [])\n    };\n  } // Process a lexeme.  Returns next position.\n\n\n  function processLexeme(buffer, lexeme) {\n    var newMode;\n    var endMode;\n    var origin;\n    modeBuffer += buffer;\n\n    if (lexeme === undefined) {\n      addSiblings(processBuffer(), currentChildren);\n      return 0;\n    }\n\n    newMode = subMode(lexeme, top);\n\n    if (newMode) {\n      addSiblings(processBuffer(), currentChildren);\n      startNewMode(newMode, lexeme);\n      return newMode.returnBegin ? 0 : lexeme.length;\n    }\n\n    endMode = endOfMode(top, lexeme);\n\n    if (endMode) {\n      origin = top;\n\n      if (!(origin.returnEnd || origin.excludeEnd)) {\n        modeBuffer += lexeme;\n      }\n\n      addSiblings(processBuffer(), currentChildren); // Close open modes.\n\n      do {\n        if (top.className) {\n          pop();\n        }\n\n        relevance += top.relevance;\n        top = top.parent;\n      } while (top !== endMode.parent);\n\n      if (origin.excludeEnd) {\n        addText(lexeme, currentChildren);\n      }\n\n      modeBuffer = '';\n\n      if (endMode.starts) {\n        startNewMode(endMode.starts, '');\n      }\n\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    if (isIllegal(lexeme, top)) {\n      throw fault('Illegal lexeme \"%s\" for mode \"%s\"', lexeme, top.className || '<unnamed>');\n    } // Parser should not reach this point as all types of lexemes should be\n    // caught earlier, but if it does due to some bug make sure it advances\n    // at least one character forward to prevent infinite looping.\n\n\n    modeBuffer += lexeme;\n    return lexeme.length ||\n    /* istanbul ignore next */\n    1;\n  } // Start a new mode with a `lexeme` to process.\n\n\n  function startNewMode(mode, lexeme) {\n    var node;\n\n    if (mode.className) {\n      node = build(mode.className, []);\n    }\n\n    if (mode.returnBegin) {\n      modeBuffer = '';\n    } else if (mode.excludeBegin) {\n      addText(lexeme, currentChildren);\n      modeBuffer = '';\n    } else {\n      modeBuffer = lexeme;\n    } // Enter a new mode.\n\n\n    if (node) {\n      currentChildren.push(node);\n      stack.push(currentChildren);\n      currentChildren = node.children;\n    }\n\n    top = Object.create(mode, {\n      parent: {\n        value: top\n      }\n    });\n  } // Process the buffer.\n\n\n  function processBuffer() {\n    var result = top.subLanguage ? processSubLanguage() : processKeywords();\n    modeBuffer = '';\n    return result;\n  } // Process a sublanguage (returns a list of nodes).\n\n\n  function processSubLanguage() {\n    var explicit = typeof top.subLanguage === 'string';\n    var subvalue;\n    /* istanbul ignore if - support non-loaded sublanguages */\n\n    if (explicit && !languages[top.subLanguage]) {\n      return addText(modeBuffer, []);\n    }\n\n    if (explicit) {\n      subvalue = coreHighlight(top.subLanguage, modeBuffer, true, prefix, continuations[top.subLanguage]);\n    } else {\n      subvalue = autoHighlight(modeBuffer, {\n        subset: top.subLanguage.length === 0 ? undefined : top.subLanguage,\n        prefix: prefix\n      });\n    } // If we couldn’t highlight, for example because the requests subset isn’t\n    // loaded, return a text node.\n\n\n    if (!subvalue.language) {\n      return [buildText(modeBuffer)];\n    } // Counting embedded language score towards the host language may be\n    // disabled with zeroing the containing mode relevance.\n    // Usecase in point is Markdown that allows XML everywhere and makes every\n    // XML snippet to have a much larger Markdown score.\n\n\n    if (top.relevance > 0) {\n      relevance += subvalue.relevance;\n    }\n\n    if (explicit) {\n      continuations[top.subLanguage] = subvalue.top;\n    }\n\n    return [build(subvalue.language, subvalue.value, true)];\n  } // Process keywords. Returns nodes.\n\n\n  function processKeywords() {\n    var nodes = [];\n    var lastIndex;\n    var keyword;\n    var node;\n    var submatch;\n\n    if (!top.keywords) {\n      return addText(modeBuffer, nodes);\n    }\n\n    lastIndex = 0;\n    top.lexemesRe.lastIndex = 0;\n    keyword = top.lexemesRe.exec(modeBuffer);\n\n    while (keyword) {\n      addText(modeBuffer.substring(lastIndex, keyword.index), nodes);\n      submatch = keywordMatch(top, keyword);\n\n      if (submatch) {\n        relevance += submatch[1];\n        node = build(submatch[0], []);\n        nodes.push(node);\n        addText(keyword[0], node.children);\n      } else {\n        addText(keyword[0], nodes);\n      }\n\n      lastIndex = top.lexemesRe.lastIndex;\n      keyword = top.lexemesRe.exec(modeBuffer);\n    }\n\n    addText(modeBuffer.substr(lastIndex), nodes);\n    return nodes;\n  } // Add siblings.\n\n\n  function addSiblings(siblings, nodes) {\n    var length = siblings.length;\n    var index = -1;\n    var sibling;\n\n    while (++index < length) {\n      sibling = siblings[index];\n\n      if (sibling.type === 'text') {\n        addText(sibling.value, nodes);\n      } else {\n        nodes.push(sibling);\n      }\n    }\n  } // Add a text.\n\n\n  function addText(value, nodes) {\n    var tail;\n\n    if (value) {\n      tail = nodes[nodes.length - 1];\n\n      if (tail && tail.type === 'text') {\n        tail.value += value;\n      } else {\n        nodes.push(buildText(value));\n      }\n    }\n\n    return nodes;\n  } // Build a text.\n\n\n  function buildText(value) {\n    return {\n      type: 'text',\n      value: value\n    };\n  } // Build a span.\n\n\n  function build(name, contents, noPrefix) {\n    return {\n      type: 'element',\n      tagName: 'span',\n      properties: {\n        className: [(noPrefix ? '' : prefix) + name]\n      },\n      children: contents\n    };\n  } // Check if the first word in `keywords` is a keyword.\n\n\n  function keywordMatch(mode, keywords) {\n    var keyword = keywords[0];\n\n    if (language[keyInsensitive]) {\n      keyword = keyword.toLowerCase();\n    }\n\n    return own.call(mode.keywords, keyword) && mode.keywords[keyword];\n  } // Check if `lexeme` is illegal according to `mode`.\n\n\n  function isIllegal(lexeme, mode) {\n    return !ignore && test(mode.illegalRe, lexeme);\n  } // Check if `lexeme` ends `mode`.\n\n\n  function endOfMode(mode, lexeme) {\n    if (test(mode.endRe, lexeme)) {\n      while (mode.endsParent && mode.parent) {\n        mode = mode.parent;\n      }\n\n      return mode;\n    }\n\n    if (mode.endsWithParent) {\n      return endOfMode(mode.parent, lexeme);\n    }\n  } // Check a sub-mode.\n\n\n  function subMode(lexeme, mode) {\n    var values = mode.contains;\n    var length = values.length;\n    var index = -1;\n\n    while (++index < length) {\n      if (test(values[index].beginRe, lexeme)) {\n        return values[index];\n      }\n    }\n  } // Exit the current context.\n\n\n  function pop() {\n    /* istanbul ignore next - removed in hljs 9.3 */\n    currentChildren = stack.pop() || children;\n  }\n}\n\nfunction expandMode(mode) {\n  var length;\n  var index;\n  var variants;\n  var result;\n\n  if (mode.variants && !mode[keyCachedVariants]) {\n    variants = mode.variants;\n    length = variants.length;\n    index = -1;\n    result = [];\n\n    while (++index < length) {\n      result[index] = inherit(mode, {\n        variants: null\n      }, variants[index]);\n    }\n\n    mode[keyCachedVariants] = result;\n  }\n\n  return mode[keyCachedVariants] || (mode.endsWithParent ? [inherit(mode)] : [mode]);\n} // Compile a language.\n\n\nfunction compileLanguage(language) {\n  compileMode(language); // Compile a language mode, optionally with a parent.\n  // eslint-disable-next-line complexity\n\n  function compileMode(mode, parent) {\n    var compiledKeywords = {};\n    var terminators;\n\n    if (mode.compiled) {\n      return;\n    }\n\n    mode.compiled = true;\n    mode.keywords = mode.keywords || mode.beginKeywords;\n\n    if (mode.keywords) {\n      if (typeof mode.keywords === 'string') {\n        flatten('keyword', mode.keywords);\n      } else {\n        Object.keys(mode.keywords).forEach(function (className) {\n          flatten(className, mode.keywords[className]);\n        });\n      }\n\n      mode.keywords = compiledKeywords;\n    }\n\n    mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true);\n\n    if (parent) {\n      if (mode.beginKeywords) {\n        mode.begin = '\\\\b(' + mode.beginKeywords.split(space).join(verticalBar) + ')\\\\b';\n      }\n\n      if (!mode.begin) {\n        mode.begin = /\\B|\\b/;\n      }\n\n      mode.beginRe = langRe(mode.begin);\n\n      if (!mode.end && !mode.endsWithParent) {\n        mode.end = /\\B|\\b/;\n      }\n\n      if (mode.end) {\n        mode.endRe = langRe(mode.end);\n      }\n\n      mode.terminatorEnd = source(mode.end) || '';\n\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        mode.terminatorEnd += (mode.end ? verticalBar : '') + parent.terminatorEnd;\n      }\n    }\n\n    if (mode.illegal) {\n      mode.illegalRe = langRe(mode.illegal);\n    }\n\n    if (mode.relevance === undefined) {\n      mode.relevance = 1;\n    }\n\n    if (!mode.contains) {\n      mode.contains = [];\n    }\n\n    mode.contains = concat.apply([], mode.contains.map(function (c) {\n      return expandMode(c === 'self' ? mode : c);\n    }));\n    mode.contains.forEach(function (c) {\n      compileMode(c, mode);\n    });\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent);\n    }\n\n    terminators = mode.contains.map(map).concat([mode.terminatorEnd, mode.illegal]).map(source).filter(Boolean);\n    mode.terminators = terminators.length === 0 ? {\n      exec: execNoop\n    } : langRe(terminators.join(verticalBar), true);\n\n    function map(c) {\n      return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin;\n    } // Flatten a classname.\n\n\n    function flatten(className, value) {\n      var pairs;\n      var pair;\n      var index;\n      var length;\n\n      if (language[keyInsensitive]) {\n        value = value.toLowerCase();\n      }\n\n      pairs = value.split(space);\n      length = pairs.length;\n      index = -1;\n\n      while (++index < length) {\n        pair = pairs[index].split(verticalBar);\n        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n      }\n    }\n  } // Create a regex for `value`.\n\n\n  function langRe(value, global) {\n    return new RegExp(source(value), 'm' + (language[keyInsensitive] ? 'i' : '') + (global ? 'g' : ''));\n  } // Get the source of an expression or string.\n\n\n  function source(re) {\n    return re && re.source || re;\n  }\n} // Normalize a syntax result.\n\n\nfunction normalize(result) {\n  return {\n    relevance: result.relevance || 0,\n    language: result.language || null,\n    value: result.value || []\n  };\n} // Check if `expression` matches `lexeme`.\n\n\nfunction test(expression, lexeme) {\n  var match = expression && expression.exec(lexeme);\n  return match && match.index === 0;\n} // No-op exec.\n\n\nfunction execNoop() {\n  return null;\n} // Get a language by `name`.\n\n\nfunction getLanguage(name) {\n  name = name.toLowerCase();\n  return languages[name] || languages[aliases[name]];\n}","map":{"version":3,"names":["high","require","fault","High","prototype","low","module","exports","highlight","highlightAuto","autoHighlight","registerLanguage","listLanguages","registerAlias","getLanguage","inherit","own","hasOwnProperty","concat","defaultPrefix","keyInsensitive","keyCachedVariants","space","verticalBar","languageNames","languages","aliases","value","options","settings","subset","prefix","length","index","result","secondBest","current","name","undefined","normalize","coreHighlight","language","relevance","syntax","lang","push","alias","map","key","list","ignore","continuation","continuations","stack","modeBuffer","top","currentChildren","offset","count","match","children","compileLanguage","terminators","lastIndex","exec","processLexeme","substring","substr","parent","className","pop","error","message","indexOf","addText","buffer","lexeme","newMode","endMode","origin","addSiblings","processBuffer","subMode","startNewMode","returnBegin","endOfMode","returnEnd","excludeEnd","starts","isIllegal","mode","node","build","excludeBegin","Object","create","subLanguage","processSubLanguage","processKeywords","explicit","subvalue","buildText","nodes","keyword","submatch","keywords","lexemesRe","keywordMatch","siblings","sibling","type","tail","contents","noPrefix","tagName","properties","toLowerCase","call","test","illegalRe","endRe","endsParent","endsWithParent","values","contains","beginRe","expandMode","variants","compileMode","compiledKeywords","compiled","beginKeywords","flatten","keys","forEach","langRe","lexemes","begin","split","join","end","terminatorEnd","source","illegal","apply","c","filter","Boolean","execNoop","pairs","pair","Number","global","RegExp","re","expression"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/lowlight/lib/core.js"],"sourcesContent":["'use strict'\n\nvar high = require('highlight.js/lib/highlight.js')\nvar fault = require('fault')\n\n// The lowlight interface, which has to be compatible with highlight.js, as\n// this object is passed to highlight.js syntaxes.\n\nfunction High() {}\n\nHigh.prototype = high\n\n// Expose.\nvar low = new High() // Ha!\n\nmodule.exports = low\n\nlow.highlight = highlight\nlow.highlightAuto = autoHighlight\nlow.registerLanguage = registerLanguage\nlow.listLanguages = listLanguages\nlow.registerAlias = registerAlias\nlow.getLanguage = getLanguage\n\nvar inherit = high.inherit\nvar own = {}.hasOwnProperty\nvar concat = [].concat\n\nvar defaultPrefix = 'hljs-'\nvar keyInsensitive = 'case_insensitive'\nvar keyCachedVariants = 'cached_variants'\nvar space = ' '\nvar verticalBar = '|'\n\n// Maps of syntaxes.\nvar languageNames = []\nvar languages = {}\nvar aliases = {}\n\n// Highlighting with language detection.\n// Accepts a string with the code to highlight.\n// Returns an object with the following properties:\n//\n// *   `language` — Detected language\n// *   `relevance` — Integer\n// *   `value` — HAST tree with highlighting markup\n// *   `secondBest` — Object with the same structure for second-best\n//     heuristically detected language, may be absent.\nfunction autoHighlight(value, options) {\n  var settings = options || {}\n  var subset = settings.subset || languageNames\n  var prefix = settings.prefix\n  var length = subset.length\n  var index = -1\n  var result\n  var secondBest\n  var current\n  var name\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value)\n  }\n\n  secondBest = normalize({})\n  result = normalize({})\n\n  while (++index < length) {\n    name = subset[index]\n\n    if (!getLanguage(name)) {\n      continue\n    }\n\n    current = normalize(coreHighlight(name, value, false, prefix))\n\n    current.language = name\n\n    if (current.relevance > secondBest.relevance) {\n      secondBest = current\n    }\n\n    if (current.relevance > result.relevance) {\n      secondBest = result\n      result = current\n    }\n  }\n\n  if (secondBest.language) {\n    result.secondBest = secondBest\n  }\n\n  return result\n}\n\n// Highlighting `value` in the language `language`.\nfunction highlight(language, value, options) {\n  var settings = options || {}\n  var prefix = settings.prefix\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix\n  }\n\n  return normalize(coreHighlight(language, value, true, prefix))\n}\n\n// Register a language.\nfunction registerLanguage(name, syntax) {\n  var lang = syntax(low)\n\n  languages[name] = lang\n\n  languageNames.push(name)\n\n  if (lang.aliases) {\n    registerAlias(name, lang.aliases)\n  }\n}\n\n// Get a list of all registered languages.\nfunction listLanguages() {\n  return languageNames.concat()\n}\n\n// Register more aliases for an already registered language.\nfunction registerAlias(name, alias) {\n  var map = name\n  var key\n  var list\n  var length\n  var index\n\n  if (alias) {\n    map = {}\n    map[name] = alias\n  }\n\n  for (key in map) {\n    list = map[key]\n    list = typeof list === 'string' ? [list] : list\n    length = list.length\n    index = -1\n\n    while (++index < length) {\n      aliases[list[index]] = key\n    }\n  }\n}\n\n// Core highlighting function.\n// Accepts a language name, or an alias, and a string with the code to\n// highlight.\n// eslint-disable-next-line max-params\nfunction coreHighlight(name, value, ignore, prefix, continuation) {\n  var continuations = {}\n  var stack = []\n  var modeBuffer = ''\n  var relevance = 0\n  var language\n  var top\n  var current\n  var currentChildren\n  var offset\n  var count\n  var match\n  var children\n\n  if (typeof name !== 'string') {\n    throw fault('Expected `string` for name, got `%s`', name)\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value)\n  }\n\n  language = getLanguage(name)\n  top = continuation || language\n  children = []\n\n  current = top\n  currentChildren = children\n\n  if (!language) {\n    throw fault('Unknown language: `%s` is not registered', name)\n  }\n\n  compileLanguage(language)\n\n  try {\n    top.terminators.lastIndex = 0\n    offset = 0\n    match = top.terminators.exec(value)\n\n    while (match) {\n      count = processLexeme(value.substring(offset, match.index), match[0])\n      offset = match.index + count\n      top.terminators.lastIndex = offset\n      match = top.terminators.exec(value)\n    }\n\n    processLexeme(value.substr(offset))\n    current = top\n\n    while (current.parent) {\n      if (current.className) {\n        pop()\n      }\n\n      current = current.parent\n    }\n\n    return {\n      relevance: relevance,\n      value: currentChildren,\n      language: name,\n      top: top\n    }\n  } catch (error) {\n    /* istanbul ignore if - Catch-all  */\n    if (error.message.indexOf('Illegal') === -1) {\n      throw error\n    }\n\n    return {relevance: 0, value: addText(value, [])}\n  }\n\n  // Process a lexeme.  Returns next position.\n  function processLexeme(buffer, lexeme) {\n    var newMode\n    var endMode\n    var origin\n\n    modeBuffer += buffer\n\n    if (lexeme === undefined) {\n      addSiblings(processBuffer(), currentChildren)\n\n      return 0\n    }\n\n    newMode = subMode(lexeme, top)\n\n    if (newMode) {\n      addSiblings(processBuffer(), currentChildren)\n\n      startNewMode(newMode, lexeme)\n\n      return newMode.returnBegin ? 0 : lexeme.length\n    }\n\n    endMode = endOfMode(top, lexeme)\n\n    if (endMode) {\n      origin = top\n\n      if (!(origin.returnEnd || origin.excludeEnd)) {\n        modeBuffer += lexeme\n      }\n\n      addSiblings(processBuffer(), currentChildren)\n\n      // Close open modes.\n      do {\n        if (top.className) {\n          pop()\n        }\n\n        relevance += top.relevance\n        top = top.parent\n      } while (top !== endMode.parent)\n\n      if (origin.excludeEnd) {\n        addText(lexeme, currentChildren)\n      }\n\n      modeBuffer = ''\n\n      if (endMode.starts) {\n        startNewMode(endMode.starts, '')\n      }\n\n      return origin.returnEnd ? 0 : lexeme.length\n    }\n\n    if (isIllegal(lexeme, top)) {\n      throw fault(\n        'Illegal lexeme \"%s\" for mode \"%s\"',\n        lexeme,\n        top.className || '<unnamed>'\n      )\n    }\n\n    // Parser should not reach this point as all types of lexemes should be\n    // caught earlier, but if it does due to some bug make sure it advances\n    // at least one character forward to prevent infinite looping.\n    modeBuffer += lexeme\n\n    return lexeme.length || /* istanbul ignore next */ 1\n  }\n\n  // Start a new mode with a `lexeme` to process.\n  function startNewMode(mode, lexeme) {\n    var node\n\n    if (mode.className) {\n      node = build(mode.className, [])\n    }\n\n    if (mode.returnBegin) {\n      modeBuffer = ''\n    } else if (mode.excludeBegin) {\n      addText(lexeme, currentChildren)\n\n      modeBuffer = ''\n    } else {\n      modeBuffer = lexeme\n    }\n\n    // Enter a new mode.\n    if (node) {\n      currentChildren.push(node)\n      stack.push(currentChildren)\n      currentChildren = node.children\n    }\n\n    top = Object.create(mode, {parent: {value: top}})\n  }\n\n  // Process the buffer.\n  function processBuffer() {\n    var result = top.subLanguage ? processSubLanguage() : processKeywords()\n    modeBuffer = ''\n    return result\n  }\n\n  // Process a sublanguage (returns a list of nodes).\n  function processSubLanguage() {\n    var explicit = typeof top.subLanguage === 'string'\n    var subvalue\n\n    /* istanbul ignore if - support non-loaded sublanguages */\n    if (explicit && !languages[top.subLanguage]) {\n      return addText(modeBuffer, [])\n    }\n\n    if (explicit) {\n      subvalue = coreHighlight(\n        top.subLanguage,\n        modeBuffer,\n        true,\n        prefix,\n        continuations[top.subLanguage]\n      )\n    } else {\n      subvalue = autoHighlight(modeBuffer, {\n        subset: top.subLanguage.length === 0 ? undefined : top.subLanguage,\n        prefix: prefix\n      })\n    }\n\n    // If we couldn’t highlight, for example because the requests subset isn’t\n    // loaded, return a text node.\n    if (!subvalue.language) {\n      return [buildText(modeBuffer)]\n    }\n\n    // Counting embedded language score towards the host language may be\n    // disabled with zeroing the containing mode relevance.\n    // Usecase in point is Markdown that allows XML everywhere and makes every\n    // XML snippet to have a much larger Markdown score.\n    if (top.relevance > 0) {\n      relevance += subvalue.relevance\n    }\n\n    if (explicit) {\n      continuations[top.subLanguage] = subvalue.top\n    }\n\n    return [build(subvalue.language, subvalue.value, true)]\n  }\n\n  // Process keywords. Returns nodes.\n  function processKeywords() {\n    var nodes = []\n    var lastIndex\n    var keyword\n    var node\n    var submatch\n\n    if (!top.keywords) {\n      return addText(modeBuffer, nodes)\n    }\n\n    lastIndex = 0\n\n    top.lexemesRe.lastIndex = 0\n\n    keyword = top.lexemesRe.exec(modeBuffer)\n\n    while (keyword) {\n      addText(modeBuffer.substring(lastIndex, keyword.index), nodes)\n\n      submatch = keywordMatch(top, keyword)\n\n      if (submatch) {\n        relevance += submatch[1]\n\n        node = build(submatch[0], [])\n\n        nodes.push(node)\n\n        addText(keyword[0], node.children)\n      } else {\n        addText(keyword[0], nodes)\n      }\n\n      lastIndex = top.lexemesRe.lastIndex\n      keyword = top.lexemesRe.exec(modeBuffer)\n    }\n\n    addText(modeBuffer.substr(lastIndex), nodes)\n\n    return nodes\n  }\n\n  // Add siblings.\n  function addSiblings(siblings, nodes) {\n    var length = siblings.length\n    var index = -1\n    var sibling\n\n    while (++index < length) {\n      sibling = siblings[index]\n\n      if (sibling.type === 'text') {\n        addText(sibling.value, nodes)\n      } else {\n        nodes.push(sibling)\n      }\n    }\n  }\n\n  // Add a text.\n  function addText(value, nodes) {\n    var tail\n\n    if (value) {\n      tail = nodes[nodes.length - 1]\n\n      if (tail && tail.type === 'text') {\n        tail.value += value\n      } else {\n        nodes.push(buildText(value))\n      }\n    }\n\n    return nodes\n  }\n\n  // Build a text.\n  function buildText(value) {\n    return {type: 'text', value: value}\n  }\n\n  // Build a span.\n  function build(name, contents, noPrefix) {\n    return {\n      type: 'element',\n      tagName: 'span',\n      properties: {\n        className: [(noPrefix ? '' : prefix) + name]\n      },\n      children: contents\n    }\n  }\n\n  // Check if the first word in `keywords` is a keyword.\n  function keywordMatch(mode, keywords) {\n    var keyword = keywords[0]\n\n    if (language[keyInsensitive]) {\n      keyword = keyword.toLowerCase()\n    }\n\n    return own.call(mode.keywords, keyword) && mode.keywords[keyword]\n  }\n\n  // Check if `lexeme` is illegal according to `mode`.\n  function isIllegal(lexeme, mode) {\n    return !ignore && test(mode.illegalRe, lexeme)\n  }\n\n  // Check if `lexeme` ends `mode`.\n  function endOfMode(mode, lexeme) {\n    if (test(mode.endRe, lexeme)) {\n      while (mode.endsParent && mode.parent) {\n        mode = mode.parent\n      }\n\n      return mode\n    }\n\n    if (mode.endsWithParent) {\n      return endOfMode(mode.parent, lexeme)\n    }\n  }\n\n  // Check a sub-mode.\n  function subMode(lexeme, mode) {\n    var values = mode.contains\n    var length = values.length\n    var index = -1\n\n    while (++index < length) {\n      if (test(values[index].beginRe, lexeme)) {\n        return values[index]\n      }\n    }\n  }\n\n  // Exit the current context.\n  function pop() {\n    /* istanbul ignore next - removed in hljs 9.3 */\n    currentChildren = stack.pop() || children\n  }\n}\n\nfunction expandMode(mode) {\n  var length\n  var index\n  var variants\n  var result\n\n  if (mode.variants && !mode[keyCachedVariants]) {\n    variants = mode.variants\n    length = variants.length\n    index = -1\n    result = []\n\n    while (++index < length) {\n      result[index] = inherit(mode, {variants: null}, variants[index])\n    }\n\n    mode[keyCachedVariants] = result\n  }\n\n  return (\n    mode[keyCachedVariants] || (mode.endsWithParent ? [inherit(mode)] : [mode])\n  )\n}\n\n// Compile a language.\nfunction compileLanguage(language) {\n  compileMode(language)\n\n  // Compile a language mode, optionally with a parent.\n  // eslint-disable-next-line complexity\n  function compileMode(mode, parent) {\n    var compiledKeywords = {}\n    var terminators\n\n    if (mode.compiled) {\n      return\n    }\n\n    mode.compiled = true\n\n    mode.keywords = mode.keywords || mode.beginKeywords\n\n    if (mode.keywords) {\n      if (typeof mode.keywords === 'string') {\n        flatten('keyword', mode.keywords)\n      } else {\n        Object.keys(mode.keywords).forEach(function(className) {\n          flatten(className, mode.keywords[className])\n        })\n      }\n\n      mode.keywords = compiledKeywords\n    }\n\n    mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true)\n\n    if (parent) {\n      if (mode.beginKeywords) {\n        mode.begin =\n          '\\\\b(' + mode.beginKeywords.split(space).join(verticalBar) + ')\\\\b'\n      }\n\n      if (!mode.begin) {\n        mode.begin = /\\B|\\b/\n      }\n\n      mode.beginRe = langRe(mode.begin)\n\n      if (!mode.end && !mode.endsWithParent) {\n        mode.end = /\\B|\\b/\n      }\n\n      if (mode.end) {\n        mode.endRe = langRe(mode.end)\n      }\n\n      mode.terminatorEnd = source(mode.end) || ''\n\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        mode.terminatorEnd +=\n          (mode.end ? verticalBar : '') + parent.terminatorEnd\n      }\n    }\n\n    if (mode.illegal) {\n      mode.illegalRe = langRe(mode.illegal)\n    }\n\n    if (mode.relevance === undefined) {\n      mode.relevance = 1\n    }\n\n    if (!mode.contains) {\n      mode.contains = []\n    }\n\n    mode.contains = concat.apply(\n      [],\n      mode.contains.map(function(c) {\n        return expandMode(c === 'self' ? mode : c)\n      })\n    )\n\n    mode.contains.forEach(function(c) {\n      compileMode(c, mode)\n    })\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent)\n    }\n\n    terminators = mode.contains\n      .map(map)\n      .concat([mode.terminatorEnd, mode.illegal])\n      .map(source)\n      .filter(Boolean)\n\n    mode.terminators =\n      terminators.length === 0\n        ? {exec: execNoop}\n        : langRe(terminators.join(verticalBar), true)\n\n    function map(c) {\n      return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin\n    }\n\n    // Flatten a classname.\n    function flatten(className, value) {\n      var pairs\n      var pair\n      var index\n      var length\n\n      if (language[keyInsensitive]) {\n        value = value.toLowerCase()\n      }\n\n      pairs = value.split(space)\n      length = pairs.length\n      index = -1\n\n      while (++index < length) {\n        pair = pairs[index].split(verticalBar)\n\n        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1]\n      }\n    }\n  }\n\n  // Create a regex for `value`.\n  function langRe(value, global) {\n    return new RegExp(\n      source(value),\n      'm' + (language[keyInsensitive] ? 'i' : '') + (global ? 'g' : '')\n    )\n  }\n\n  // Get the source of an expression or string.\n  function source(re) {\n    return (re && re.source) || re\n  }\n}\n\n// Normalize a syntax result.\nfunction normalize(result) {\n  return {\n    relevance: result.relevance || 0,\n    language: result.language || null,\n    value: result.value || []\n  }\n}\n\n// Check if `expression` matches `lexeme`.\nfunction test(expression, lexeme) {\n  var match = expression && expression.exec(lexeme)\n  return match && match.index === 0\n}\n\n// No-op exec.\nfunction execNoop() {\n  return null\n}\n\n// Get a language by `name`.\nfunction getLanguage(name) {\n  name = name.toLowerCase()\n\n  return languages[name] || languages[aliases[name]]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}