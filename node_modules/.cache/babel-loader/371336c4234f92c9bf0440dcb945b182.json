{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = smarty;\nsmarty.displayName = 'smarty';\nsmarty.aliases = [];\n\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\n  Add support for variables inside double quoted strings\n  Add support for {php}\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n        pattern: /(\\.|->)(?!\\d)\\w+/,\n        lookbehind: true\n      }, {\n        pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n        lookbehind: true\n      }],\n      function: [{\n        pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n        lookbehind: true\n      }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    }; // Tokenize all inline Smarty expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n      var smartyLitteralStart = '{literal}';\n      var smartyLitteralEnd = '{/literal}';\n      var smartyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n        // Smarty tags inside {literal} block are ignored\n        if (match === smartyLitteralEnd) {\n          smartyLitteralMode = false;\n        }\n\n        if (!smartyLitteralMode) {\n          if (match === smartyLitteralStart) {\n            smartyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkupTemplating","require","module","exports","smarty","displayName","aliases","Prism","register","languages","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","inside","operator","punctuation","keyword","hooks","add","env","smartyPattern","smartyLitteralStart","smartyLitteralEnd","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/smarty.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\nAdd support for variables inside double quoted strings\nAdd support for {php}\n*/\n  ;(function(Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: [\n        {\n          pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /^\\/?(?!\\d)\\w+/,\n        /(?!\\d)\\w+(?=\\()/\n      ],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\n      ],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    } // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function(env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g\n      var smartyLitteralStart = '{literal}'\n      var smartyLitteralEnd = '{/literal}'\n      var smartyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function(match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLitteralEnd) {\n            smartyLitteralMode = false\n          }\n          if (!smartyLitteralMode) {\n            if (match === smartyLitteralStart) {\n              smartyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA;;AACA,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,wBAAD,CAAvC;;AACAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;EACrBA,KAAK,CAACC,QAAN,CAAeR,yBAAf;EACA;AACF;AACA;AACA;EAJE;;EAKC,CAAC,UAASO,KAAT,EAAgB;IAChBA,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyB;MACvBM,OAAO,EAAE,kBADc;MAEvBC,SAAS,EAAE;QACTC,OAAO,EAAE,UADA;QAETC,KAAK,EAAE;MAFE,CAFY;MAMvBC,MAAM,EAAE,kCANe;MAOvBC,MAAM,EAAE,0DAPe;MAQvBC,QAAQ,EAAE,CACR,aADQ,EAER,aAFQ,EAGR;QACEJ,OAAO,EAAE,kBADX;QAEEK,UAAU,EAAE;MAFd,CAHQ,EAOR;QACEL,OAAO,EAAE,qBADX;QAEEK,UAAU,EAAE;MAFd,CAPQ,CARa;MAoBvBC,QAAQ,EAAE,CACR;QACEN,OAAO,EAAE,oBADX;QAEEK,UAAU,EAAE;MAFd,CADQ,EAKR,eALQ,EAMR,iBANQ,CApBa;MA4BvB,aAAa;QACX;QACAL,OAAO,EAAE,0BAFE;QAGXO,MAAM,EAAE;UACNH,QAAQ,EAAE;YACRJ,OAAO,EAAE,iBADD;YAERK,UAAU,EAAE;UAFJ,CADJ;UAKNG,QAAQ,EAAE;QALJ;MAHG,CA5BU;MAuCvBC,WAAW,EAAE,CAAC,iBAAD,CAvCU;MAwCvBD,QAAQ,EAAE,CACR,kCADQ,EAER,gDAFQ,EAGR,gDAHQ,CAxCa;MA6CvBE,OAAO,EAAE;IA7Cc,CAAzB,CADgB,CA+Cd;;IACFf,KAAK,CAACgB,KAAN,CAAYC,GAAZ,CAAgB,iBAAhB,EAAmC,UAASC,GAAT,EAAc;MAC/C,IAAIC,aAAa,GAAG,gCAApB;MACA,IAAIC,mBAAmB,GAAG,WAA1B;MACA,IAAIC,iBAAiB,GAAG,YAAxB;MACA,IAAIC,kBAAkB,GAAG,KAAzB;MACAtB,KAAK,CAACE,SAAN,CAAgB,mBAAhB,EAAqCqB,iBAArC,CACEL,GADF,EAEE,QAFF,EAGEC,aAHF,EAIE,UAASK,KAAT,EAAgB;QACd;QACA,IAAIA,KAAK,KAAKH,iBAAd,EAAiC;UAC/BC,kBAAkB,GAAG,KAArB;QACD;;QACD,IAAI,CAACA,kBAAL,EAAyB;UACvB,IAAIE,KAAK,KAAKJ,mBAAd,EAAmC;YACjCE,kBAAkB,GAAG,IAArB;UACD;;UACD,OAAO,IAAP;QACD;;QACD,OAAO,KAAP;MACD,CAhBH;IAkBD,CAvBD,EAhDgB,CAuEb;;IACHtB,KAAK,CAACgB,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkC,UAASC,GAAT,EAAc;MAC9ClB,KAAK,CAACE,SAAN,CAAgB,mBAAhB,EAAqCuB,oBAArC,CAA0DP,GAA1D,EAA+D,QAA/D;IACD,CAFD;EAGD,CA3EA,EA2EElB,KA3EF;AA4EF"},"metadata":{},"sourceType":"script"}