{"ast":null,"code":"'use strict';\n\nmodule.exports = haxe;\nhaxe.displayName = 'haxe';\nhaxe.aliases = [];\n\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    // Strings can be multi-line\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n          lookbehind: true,\n          inside: {\n            interpolation: {\n              pattern: /^\\$\\w*/,\n              alias: 'variable'\n            } // See rest below\n\n          }\n        }\n      }\n    },\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n  });\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#\\w+/,\n      alias: 'builtin'\n    },\n    metadata: {\n      pattern: /@:?\\w+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;\n  delete Prism.languages.haxe['class-name'];\n}","map":{"version":3,"names":["module","exports","haxe","displayName","aliases","Prism","languages","extend","string","pattern","greedy","inside","interpolation","lookbehind","alias","keyword","operator","insertBefore","regex","preprocessor","metadata","reification","rest"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/haxe.js"],"sourcesContent":["'use strict'\n\nmodule.exports = haxe\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    // Strings can be multi-line\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n          lookbehind: true,\n          inside: {\n            interpolation: {\n              pattern: /^\\$\\w*/,\n              alias: 'variable'\n            } // See rest below\n          }\n        }\n      }\n    },\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#\\w+/,\n      alias: 'builtin'\n    },\n    metadata: {\n      pattern: /@:?\\w+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'variable'\n    }\n  })\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest =\n    Prism.languages.haxe\n  delete Prism.languages.haxe['class-name']\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;EACnBA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;IACrD;IACAC,MAAM,EAAE;MACNC,OAAO,EAAE,mCADH;MAENC,MAAM,EAAE,IAFF;MAGNC,MAAM,EAAE;QACNC,aAAa,EAAE;UACbH,OAAO,EAAE,8BADI;UAEbI,UAAU,EAAE,IAFC;UAGbF,MAAM,EAAE;YACNC,aAAa,EAAE;cACbH,OAAO,EAAE,QADI;cAEbK,KAAK,EAAE;YAFM,CADT,CAIJ;;UAJI;QAHK;MADT;IAHF,CAF6C;IAkBrD;IACAC,OAAO,EAAE,uRAnB4C;IAoBrDC,QAAQ,EAAE;EApB2C,CAAhC,CAAvB;EAsBAX,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;IACjDC,KAAK,EAAE;MACLT,OAAO,EAAE,mCADJ;MAELC,MAAM,EAAE;IAFH;EAD0C,CAAnD;EAMAL,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;IAC9CE,YAAY,EAAE;MACZV,OAAO,EAAE,MADG;MAEZK,KAAK,EAAE;IAFK,CADgC;IAK9CM,QAAQ,EAAE;MACRX,OAAO,EAAE,QADD;MAERK,KAAK,EAAE;IAFC,CALoC;IAS9CO,WAAW,EAAE;MACXZ,OAAO,EAAE,kBADE;MAEXK,KAAK,EAAE;IAFI;EATiC,CAAhD;EAcAT,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqB,QAArB,EAA+BS,MAA/B,CAAsC,eAAtC,EAAuDA,MAAvD,CAA8DW,IAA9D,GACEjB,KAAK,CAACC,SAAN,CAAgBJ,IADlB;EAEA,OAAOG,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqB,YAArB,CAAP;AACD"},"metadata":{},"sourceType":"script"}