{"ast":null,"code":"'use strict';\n\nmodule.exports = pug;\npug.displayName = 'pug';\npug.aliases = [];\n\nfunction pug(Prism) {\n  ;\n\n  (function (Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [// Declaration\n      {\n        pattern: /(^[\\t ]*)mixin .+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^mixin/,\n          function: /\\w+(?=\\s*\\(|\\s*$)/,\n          punctuation: /[(),.]/\n        }\n      }, // Usage\n      {\n        pattern: /(^[\\t ]*)\\+.+/m,\n        lookbehind: true,\n        inside: {\n          name: {\n            pattern: /^\\+\\w+/,\n            alias: 'function'\n          },\n          rest: Prism.languages.javascript\n        }\n      }],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            pattern: /&[^(]+\\([^)]+\\)/,\n            inside: {\n              rest: Prism.languages.javascript\n            }\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                lookbehind: true,\n                inside: {\n                  rest: Prism.languages.javascript\n                }\n              },\n              'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[!=(),]+/\n            }\n          }],\n          punctuation: /:/\n        }\n      },\n      code: [{\n        pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      }],\n      punctuation: /[.\\-!=|]+/\n    };\n    var filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/.source; // Non exhaustive list of available filters and associated languages\n\n    var filters = [{\n      filter: 'atpl',\n      language: 'twig'\n    }, {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'ejs', 'handlebars', 'less', 'livescript', 'markdown', {\n      filter: 'sass',\n      language: 'scss'\n    }, 'stylus'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter), 'm'),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('pug', 'filter', all_filters);\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","pug","displayName","aliases","Prism","languages","comment","pattern","lookbehind","inside","rest","javascript","filter","alias","markup","doctype","each","keyword","punctuation","branch","mixin","function","name","script","tag","attributes","code","filter_pattern","source","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/pug.js"],"sourcesContent":["'use strict'\n\nmodule.exports = pug\npug.displayName = 'pug'\npug.aliases = []\nfunction pug(Prism) {\n  ;(function(Prism) {\n    // TODO:\n    // - Add CSS highlighting inside <style> tags\n    // - Add support for multi-line code blocks\n    // - Add support for interpolation #{} and !{}\n    // - Add support for tag interpolation #[]\n    // - Add explicit support for plain text using |\n    // - Add support for markup embedded in plain text\n    Prism.languages.pug = {\n      // Multiline stuff should appear before the rest\n      // This handles both single-line and multi-line comments\n      comment: {\n        pattern: /(^([\\t ]*))\\/\\/.*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/m,\n        lookbehind: true\n      },\n      // All the tag-related part is in lookbehind\n      // so that it can be highlighted by the \"tag\" pattern\n      'multiline-script': {\n        pattern: /(^([\\t ]*)script\\b.*\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /(^([\\t ]*)):.+(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      'multiline-plain-text': {\n        pattern: /(^([\\t ]*)[\\w\\-#.]+\\.[\\t ]*)(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/m,\n        lookbehind: true\n      },\n      markup: {\n        pattern: /(^[\\t ]*)<.+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\n)[\\t ]*)doctype(?: .+)?/,\n        lookbehind: true\n      },\n      // This handle all conditional and loop keywords\n      'flow-control': {\n        pattern: /(^[\\t ]*)(?:if|unless|else|case|when|default|each|while)\\b(?: .+)?/m,\n        lookbehind: true,\n        inside: {\n          each: {\n            pattern: /^each .+? in\\b/,\n            inside: {\n              keyword: /\\b(?:each|in)\\b/,\n              punctuation: /,/\n            }\n          },\n          branch: {\n            pattern: /^(?:if|unless|else|case|when|default|while)\\b/,\n            alias: 'keyword'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      keyword: {\n        pattern: /(^[\\t ]*)(?:block|extends|include|append|prepend)\\b.+/m,\n        lookbehind: true\n      },\n      mixin: [\n        // Declaration\n        {\n          pattern: /(^[\\t ]*)mixin .+/m,\n          lookbehind: true,\n          inside: {\n            keyword: /^mixin/,\n            function: /\\w+(?=\\s*\\(|\\s*$)/,\n            punctuation: /[(),.]/\n          }\n        }, // Usage\n        {\n          pattern: /(^[\\t ]*)\\+.+/m,\n          lookbehind: true,\n          inside: {\n            name: {\n              pattern: /^\\+\\w+/,\n              alias: 'function'\n            },\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      script: {\n        pattern: /(^[\\t ]*script(?:(?:&[^(]+)?\\([^)]+\\))*[\\t ]+).+/m,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.javascript\n        }\n      },\n      'plain-text': {\n        pattern: /(^[\\t ]*(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?[\\t ]+).+/m,\n        lookbehind: true\n      },\n      tag: {\n        pattern: /(^[\\t ]*)(?!-)[\\w\\-#.]*[\\w\\-](?:(?:&[^(]+)?\\([^)]+\\))*\\/?:?/m,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              pattern: /&[^(]+\\([^)]+\\)/,\n              inside: {\n                rest: Prism.languages.javascript\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\\{[^}]*\\}|[^,)\\r\\n]+)/,\n                  lookbehind: true,\n                  inside: {\n                    rest: Prism.languages.javascript\n                  }\n                },\n                'attr-name': /[\\w-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[!=(),]+/\n              }\n            }\n          ],\n          punctuation: /:/\n        }\n      },\n      code: [\n        {\n          pattern: /(^[\\t ]*(?:-|!?=)).+/m,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.javascript\n          }\n        }\n      ],\n      punctuation: /[.\\-!=|]+/\n    }\n    var filter_pattern = /(^([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r(?!\\n))(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/\n      .source // Non exhaustive list of available filters and associated languages\n    var filters = [\n      {\n        filter: 'atpl',\n        language: 'twig'\n      },\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'ejs',\n      'handlebars',\n      'less',\n      'livescript',\n      'markdown',\n      {\n        filter: 'sass',\n        language: 'scss'\n      },\n      'stylus'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter),\n            'm'\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('pug', 'filter', all_filters)\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}