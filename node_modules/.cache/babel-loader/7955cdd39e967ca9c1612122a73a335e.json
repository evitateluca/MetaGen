{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport createElement from './create-element';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      _ref$numberProps = _ref.numberProps,\n      numberProps = _ref$numberProps === void 0 ? {} : _ref$numberProps;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    var properties = typeof numberProps === 'function' ? numberProps(number) : numberProps;\n    return React.createElement(\"span\", _extends({\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\"\n    }, properties), \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction LineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerProps = _ref2.containerProps,\n      containerProps = _ref2$containerProps === void 0 ? {} : _ref2$containerProps,\n      numberProps = _ref2.numberProps,\n      startingLineNumber = _ref2.startingLineNumber;\n  containerProps.style = containerProps.style || {\n    float: 'left',\n    paddingRight: '10px'\n  };\n  return React.createElement(\"code\", _extends({}, containerProps, {\n    style: Object.assign({}, codeStyle, containerProps.style)\n  }), getLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    numberProps: numberProps,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineProps = _ref3.lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className;\n  var properties = (typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps) || {};\n  properties.className = properties.className ? className.concat(properties.className) : className;\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: className\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction wrapLinesInSpan(codeTree, lineProps) {\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = newTree.length + 1;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        };\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          newTree.push(createLineElement({\n            children: _children,\n            lineNumber: lineNumber,\n            lineProps: lineProps\n          }));\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            newTree.push(createLineElement({\n              children: [newChild],\n              lineNumber: lineNumber,\n              lineProps: lineProps,\n              className: node.properties.className\n            }));\n          }\n        } else {\n          newTree.push(createLineElement({\n            children: [newChild],\n            lineNumber: lineNumber,\n            lineProps: lineProps,\n            className: node.properties.className\n          }));\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      newTree.push(createLineElement({\n        children: children,\n        lineNumber: newTree.length + 1,\n        lineProps: lineProps\n      }));\n    }\n  }\n\n  return newTree;\n}\n\nfunction defaultRenderer(_ref4) {\n  var rows = _ref4.rows,\n      stylesheet = _ref4.stylesheet,\n      useInlineStyles = _ref4.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n}\n\nfunction getCodeTree(_ref5) {\n  var astGenerator = _ref5.astGenerator,\n      language = _ref5.language,\n      code = _ref5.code,\n      defaultCodeValue = _ref5.defaultCodeValue;\n\n  if (astGenerator.getLanguage) {\n    var hasLanguage = language && astGenerator.getLanguage(language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  }\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref6) {\n    var language = _ref6.language,\n        children = _ref6.children,\n        _ref6$style = _ref6.style,\n        style = _ref6$style === void 0 ? defaultStyle : _ref6$style,\n        _ref6$customStyle = _ref6.customStyle,\n        customStyle = _ref6$customStyle === void 0 ? {} : _ref6$customStyle,\n        _ref6$codeTagProps = _ref6.codeTagProps,\n        codeTagProps = _ref6$codeTagProps === void 0 ? {\n      style: style['code[class*=\"language-\"]']\n    } : _ref6$codeTagProps,\n        _ref6$useInlineStyles = _ref6.useInlineStyles,\n        useInlineStyles = _ref6$useInlineStyles === void 0 ? true : _ref6$useInlineStyles,\n        _ref6$showLineNumbers = _ref6.showLineNumbers,\n        showLineNumbers = _ref6$showLineNumbers === void 0 ? false : _ref6$showLineNumbers,\n        _ref6$startingLineNum = _ref6.startingLineNumber,\n        startingLineNumber = _ref6$startingLineNum === void 0 ? 1 : _ref6$startingLineNum,\n        lineNumberContainerProps = _ref6.lineNumberContainerProps,\n        lineNumberProps = _ref6.lineNumberProps,\n        wrapLines = _ref6.wrapLines,\n        _ref6$lineProps = _ref6.lineProps,\n        lineProps = _ref6$lineProps === void 0 ? {} : _ref6$lineProps,\n        renderer = _ref6.renderer,\n        _ref6$PreTag = _ref6.PreTag,\n        PreTag = _ref6$PreTag === void 0 ? 'pre' : _ref6$PreTag,\n        _ref6$CodeTag = _ref6.CodeTag,\n        CodeTag = _ref6$CodeTag === void 0 ? 'code' : _ref6$CodeTag,\n        _ref6$code = _ref6.code,\n        code = _ref6$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref6$code,\n        astGenerator = _ref6.astGenerator,\n        rest = _objectWithoutProperties(_ref6, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"startingLineNumber\", \"lineNumberContainerProps\", \"lineNumberProps\", \"wrapLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var lineNumbers = showLineNumbers ? React.createElement(LineNumbers, {\n      containerProps: lineNumberContainerProps,\n      codeStyle: codeTagProps.style || {},\n      numberProps: lineNumberProps,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: 'hljs'\n    });\n\n    if (!astGenerator) {\n      return React.createElement(PreTag, preProps, lineNumbers, React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined\n     */\n\n\n    wrapLines = renderer && wrapLines === undefined ? true : wrapLines;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    }\n\n    var tree = wrapLines ? wrapLinesInSpan(codeTree, lineProps) : codeTree.value;\n    return React.createElement(PreTag, preProps, lineNumbers, React.createElement(CodeTag, codeTagProps, renderer({\n      rows: tree,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}","map":{"version":3,"names":["_objectWithoutProperties","_extends","React","createElement","newLineRegex","getNewLines","str","match","getLineNumbers","_ref","lines","startingLineNumber","_ref$numberProps","numberProps","map","_","i","number","properties","key","concat","className","LineNumbers","_ref2","codeString","codeStyle","_ref2$containerProps","containerProps","style","float","paddingRight","Object","assign","replace","split","createLineElement","_ref3","children","lineNumber","lineProps","_ref3$className","type","tagName","flattenCodeTree","tree","arguments","length","undefined","newTree","node","push","classNames","wrapLinesInSpan","codeTree","value","lastLineBreakIndex","index","_loop","newLines","splitValue","forEach","text","newChild","_children","slice","stringChild","lastLineInPreviousSpan","newElem","splice","defaultRenderer","_ref4","rows","stylesheet","useInlineStyles","getCodeTree","_ref5","astGenerator","language","code","defaultCodeValue","getLanguage","hasLanguage","highlight","highlightAuto","e","defaultAstGenerator","defaultStyle","SyntaxHighlighter","_ref6","_ref6$style","_ref6$customStyle","customStyle","_ref6$codeTagProps","codeTagProps","_ref6$useInlineStyles","_ref6$showLineNumbers","showLineNumbers","_ref6$startingLineNum","lineNumberContainerProps","lineNumberProps","wrapLines","_ref6$lineProps","renderer","_ref6$PreTag","PreTag","_ref6$CodeTag","CodeTag","_ref6$code","Array","isArray","rest","lineNumbers","defaultPreStyle","hljs","backgroundColor","preProps"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/react-syntax-highlighter/dist/esm/highlight.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport createElement from './create-element';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      _ref$numberProps = _ref.numberProps,\n      numberProps = _ref$numberProps === void 0 ? {} : _ref$numberProps;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    var properties = typeof numberProps === 'function' ? numberProps(number) : numberProps;\n    return React.createElement(\"span\", _extends({\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\"\n    }, properties), \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction LineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerProps = _ref2.containerProps,\n      containerProps = _ref2$containerProps === void 0 ? {} : _ref2$containerProps,\n      numberProps = _ref2.numberProps,\n      startingLineNumber = _ref2.startingLineNumber;\n  containerProps.style = containerProps.style || {\n    float: 'left',\n    paddingRight: '10px'\n  };\n  return React.createElement(\"code\", _extends({}, containerProps, {\n    style: Object.assign({}, codeStyle, containerProps.style)\n  }), getLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    numberProps: numberProps,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineProps = _ref3.lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className;\n  var properties = (typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps) || {};\n  properties.className = properties.className ? className.concat(properties.className) : className;\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: className\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction wrapLinesInSpan(codeTree, lineProps) {\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = newTree.length + 1;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        };\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          newTree.push(createLineElement({\n            children: _children,\n            lineNumber: lineNumber,\n            lineProps: lineProps\n          }));\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            newTree.push(createLineElement({\n              children: [newChild],\n              lineNumber: lineNumber,\n              lineProps: lineProps,\n              className: node.properties.className\n            }));\n          }\n        } else {\n          newTree.push(createLineElement({\n            children: [newChild],\n            lineNumber: lineNumber,\n            lineProps: lineProps,\n            className: node.properties.className\n          }));\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      newTree.push(createLineElement({\n        children: children,\n        lineNumber: newTree.length + 1,\n        lineProps: lineProps\n      }));\n    }\n  }\n\n  return newTree;\n}\n\nfunction defaultRenderer(_ref4) {\n  var rows = _ref4.rows,\n      stylesheet = _ref4.stylesheet,\n      useInlineStyles = _ref4.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n}\n\nfunction getCodeTree(_ref5) {\n  var astGenerator = _ref5.astGenerator,\n      language = _ref5.language,\n      code = _ref5.code,\n      defaultCodeValue = _ref5.defaultCodeValue;\n\n  if (astGenerator.getLanguage) {\n    var hasLanguage = language && astGenerator.getLanguage(language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  }\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref6) {\n    var language = _ref6.language,\n        children = _ref6.children,\n        _ref6$style = _ref6.style,\n        style = _ref6$style === void 0 ? defaultStyle : _ref6$style,\n        _ref6$customStyle = _ref6.customStyle,\n        customStyle = _ref6$customStyle === void 0 ? {} : _ref6$customStyle,\n        _ref6$codeTagProps = _ref6.codeTagProps,\n        codeTagProps = _ref6$codeTagProps === void 0 ? {\n      style: style['code[class*=\"language-\"]']\n    } : _ref6$codeTagProps,\n        _ref6$useInlineStyles = _ref6.useInlineStyles,\n        useInlineStyles = _ref6$useInlineStyles === void 0 ? true : _ref6$useInlineStyles,\n        _ref6$showLineNumbers = _ref6.showLineNumbers,\n        showLineNumbers = _ref6$showLineNumbers === void 0 ? false : _ref6$showLineNumbers,\n        _ref6$startingLineNum = _ref6.startingLineNumber,\n        startingLineNumber = _ref6$startingLineNum === void 0 ? 1 : _ref6$startingLineNum,\n        lineNumberContainerProps = _ref6.lineNumberContainerProps,\n        lineNumberProps = _ref6.lineNumberProps,\n        wrapLines = _ref6.wrapLines,\n        _ref6$lineProps = _ref6.lineProps,\n        lineProps = _ref6$lineProps === void 0 ? {} : _ref6$lineProps,\n        renderer = _ref6.renderer,\n        _ref6$PreTag = _ref6.PreTag,\n        PreTag = _ref6$PreTag === void 0 ? 'pre' : _ref6$PreTag,\n        _ref6$CodeTag = _ref6.CodeTag,\n        CodeTag = _ref6$CodeTag === void 0 ? 'code' : _ref6$CodeTag,\n        _ref6$code = _ref6.code,\n        code = _ref6$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref6$code,\n        astGenerator = _ref6.astGenerator,\n        rest = _objectWithoutProperties(_ref6, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"startingLineNumber\", \"lineNumberContainerProps\", \"lineNumberProps\", \"wrapLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var lineNumbers = showLineNumbers ? React.createElement(LineNumbers, {\n      containerProps: lineNumberContainerProps,\n      codeStyle: codeTagProps.style || {},\n      numberProps: lineNumberProps,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: 'hljs'\n    });\n\n    if (!astGenerator) {\n      return React.createElement(PreTag, preProps, lineNumbers, React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined\n     */\n\n\n    wrapLines = renderer && wrapLines === undefined ? true : wrapLines;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    }\n\n    var tree = wrapLines ? wrapLinesInSpan(codeTree, lineProps) : codeTree.value;\n    return React.createElement(PreTag, preProps, lineNumbers, React.createElement(CodeTag, codeTagProps, renderer({\n      rows: tree,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}