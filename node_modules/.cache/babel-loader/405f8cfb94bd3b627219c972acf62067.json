{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\n\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    });\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    });\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }); // Must be defined after the function pattern\n\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    });\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    };\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n\n        }\n      }\n    }); // The different types of PHP strings \"replace\" the C-like standard string\n\n    delete Prism.languages.php['string'];\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkupTemplating","require","module","exports","php","displayName","aliases","Prism","register","languages","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","greedy","interpolation","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/php.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;(function(Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    })\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    })\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }) // Must be defined after the function pattern\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    })\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    }\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    }) // The different types of PHP strings \"replace\" the C-like standard string\n    delete Prism.languages.php['string']\n    Prism.hooks.add('before-tokenize', function(env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}