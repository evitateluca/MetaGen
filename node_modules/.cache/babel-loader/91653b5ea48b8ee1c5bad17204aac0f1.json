{"ast":null,"code":"'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      }],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    delete Prism.languages.ruby.function;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        // Here we need to specifically allow interpolation\n        pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","ruby","displayName","aliases","Prism","languages","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","function","insertBefore","regex","lookbehind","variable","symbol","builtin","constant","string","rb"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/ruby.js"],"sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;(function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          // Here we need to specifically allow interpolation\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        // Here we need to specifically allow interpolation\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}