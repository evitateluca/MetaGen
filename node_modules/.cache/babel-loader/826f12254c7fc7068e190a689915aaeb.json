{"ast":null,"code":"'use strict';\n\nmodule.exports = java;\njava.displayName = 'java';\njava.aliases = [];\n\nfunction java(Prism) {\n  ;\n\n  (function (Prism) {\n    var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/; // based on the java naming conventions\n\n    var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [className, // variables and parameters\n      // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n      /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n      keyword: keywords,\n      function: [Prism.languages.clike.function, {\n        pattern: /(\\:\\:)[a-z_]\\w*/,\n        lookbehind: true\n      }],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        alias: 'punctuation',\n        pattern: /(^|[^.])@\\w+/,\n        lookbehind: true\n      },\n      namespace: {\n        pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","java","displayName","aliases","Prism","keywords","className","languages","extend","keyword","function","clike","pattern","lookbehind","number","operator","insertBefore","annotation","alias","namespace","inside","punctuation","generics"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/java.js"],"sourcesContent":["'use strict'\n\nmodule.exports = java\njava.displayName = 'java'\njava.aliases = []\nfunction java(Prism) {\n  ;(function(Prism) {\n    var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/ // based on the java naming conventions\n    var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/\n    Prism.languages.java = Prism.languages.extend('clike', {\n      'class-name': [\n        className, // variables and parameters\n        // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n        /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/\n      ],\n      keyword: keywords,\n      function: [\n        Prism.languages.clike.function,\n        {\n          pattern: /(\\:\\:)[a-z_]\\w*/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n      operator: {\n        pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('java', 'class-name', {\n      annotation: {\n        alias: 'punctuation',\n        pattern: /(^|[^.])@\\w+/,\n        lookbehind: true\n      },\n      namespace: {\n        pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      generics: {\n        pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n        inside: {\n          'class-name': className,\n          keyword: keywords,\n          punctuation: /[<>(),.:]/,\n          operator: /[?&|]/\n        }\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;EACnB;;EAAC,CAAC,UAASA,KAAT,EAAgB;IAChB,IAAIC,QAAQ,GAAG,yaAAf,CADgB,CACya;;IACzb,IAAIC,SAAS,GAAG,2BAAhB;IACAF,KAAK,CAACG,SAAN,CAAgBN,IAAhB,GAAuBG,KAAK,CAACG,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;MACrD,cAAc,CACZF,SADY,EACD;MACX;MACA,iCAHY,CADuC;MAMrDG,OAAO,EAAEJ,QAN4C;MAOrDK,QAAQ,EAAE,CACRN,KAAK,CAACG,SAAN,CAAgBI,KAAhB,CAAsBD,QADd,EAER;QACEE,OAAO,EAAE,iBADX;QAEEC,UAAU,EAAE;MAFd,CAFQ,CAP2C;MAcrDC,MAAM,EAAE,kHAd6C;MAerDC,QAAQ,EAAE;QACRH,OAAO,EAAE,+DADD;QAERC,UAAU,EAAE;MAFJ;IAf2C,CAAhC,CAAvB;IAoBAT,KAAK,CAACG,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;MACjDC,UAAU,EAAE;QACVC,KAAK,EAAE,aADG;QAEVN,OAAO,EAAE,cAFC;QAGVC,UAAU,EAAE;MAHF,CADqC;MAMjDM,SAAS,EAAE;QACTP,OAAO,EAAE,kIADA;QAETC,UAAU,EAAE,IAFH;QAGTO,MAAM,EAAE;UACNC,WAAW,EAAE;QADP;MAHC,CANsC;MAajDC,QAAQ,EAAE;QACRV,OAAO,EAAE,qEADD;QAERQ,MAAM,EAAE;UACN,cAAcd,SADR;UAENG,OAAO,EAAEJ,QAFH;UAGNgB,WAAW,EAAE,WAHP;UAINN,QAAQ,EAAE;QAJJ;MAFA;IAbuC,CAAnD;EAuBD,CA9CA,EA8CEX,KA9CF;AA+CF"},"metadata":{},"sourceType":"script"}