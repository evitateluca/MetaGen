{"ast":null,"code":"'use strict';\n\nmodule.exports = jq;\njq.displayName = 'jq';\njq.aliases = [];\n\nfunction jq(Prism) {\n  ;\n\n  (function (Prism) {\n    var interpolation = /\\\\\\((?:[^()]|\\([^()]*\\))*\\)/.source;\n    var string = RegExp(/\"(?:[^\"\\r\\n\\\\]|\\\\[^\\r\\n(]|__)*\"/.source.replace(/__/g, interpolation));\n    var stringInterpolation = {\n      interpolation: {\n        pattern: RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + interpolation),\n        lookbehind: true,\n        inside: {\n          content: {\n            pattern: /^(\\\\\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: null // see below\n\n          },\n          punctuation: /^\\\\\\(|\\)$/\n        }\n      }\n    };\n    var jq = Prism.languages.jq = {\n      comment: /#.*/,\n      property: {\n        pattern: RegExp(string.source + /(?=\\s*:(?!:))/.source),\n        greedy: true,\n        inside: stringInterpolation\n      },\n      string: {\n        pattern: string,\n        greedy: true,\n        inside: stringInterpolation\n      },\n      function: {\n        pattern: /(\\bdef\\s+)[a-z_]\\w+/i,\n        lookbehind: true\n      },\n      variable: /\\B\\$\\w+/,\n      'property-literal': {\n        pattern: /[a-z_]\\w*(?=\\s*:(?!:))/i,\n        alias: 'property'\n      },\n      keyword: /\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      number: /(?:\\b\\d+\\.|\\B\\.)?\\d+(?:[eE][+-]?\\d+)?\\b/,\n      operator: [{\n        pattern: /\\|=?/,\n        alias: 'pipe'\n      }, /\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|or|not)\\b/],\n      'c-style-function': {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        alias: 'function'\n      },\n      punctuation: /::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,\n      dot: {\n        pattern: /\\./,\n        alias: 'important'\n      }\n    };\n    stringInterpolation.interpolation.inside.content.inside = jq;\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","jq","displayName","aliases","Prism","interpolation","source","string","RegExp","replace","stringInterpolation","pattern","lookbehind","inside","content","punctuation","languages","comment","property","greedy","function","variable","alias","keyword","boolean","number","operator","dot"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/refractor/lang/jq.js"],"sourcesContent":["'use strict'\n\nmodule.exports = jq\njq.displayName = 'jq'\njq.aliases = []\nfunction jq(Prism) {\n  ;(function(Prism) {\n    var interpolation = /\\\\\\((?:[^()]|\\([^()]*\\))*\\)/.source\n    var string = RegExp(\n      /\"(?:[^\"\\r\\n\\\\]|\\\\[^\\r\\n(]|__)*\"/.source.replace(/__/g, interpolation)\n    )\n    var stringInterpolation = {\n      interpolation: {\n        pattern: RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + interpolation),\n        lookbehind: true,\n        inside: {\n          content: {\n            pattern: /^(\\\\\\()[\\s\\S]+(?=\\)$)/,\n            lookbehind: true,\n            inside: null // see below\n          },\n          punctuation: /^\\\\\\(|\\)$/\n        }\n      }\n    }\n    var jq = (Prism.languages.jq = {\n      comment: /#.*/,\n      property: {\n        pattern: RegExp(string.source + /(?=\\s*:(?!:))/.source),\n        greedy: true,\n        inside: stringInterpolation\n      },\n      string: {\n        pattern: string,\n        greedy: true,\n        inside: stringInterpolation\n      },\n      function: {\n        pattern: /(\\bdef\\s+)[a-z_]\\w+/i,\n        lookbehind: true\n      },\n      variable: /\\B\\$\\w+/,\n      'property-literal': {\n        pattern: /[a-z_]\\w*(?=\\s*:(?!:))/i,\n        alias: 'property'\n      },\n      keyword: /\\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      number: /(?:\\b\\d+\\.|\\B\\.)?\\d+(?:[eE][+-]?\\d+)?\\b/,\n      operator: [\n        {\n          pattern: /\\|=?/,\n          alias: 'pipe'\n        },\n        /\\.\\.|[!=<>]?=|\\?\\/\\/|\\/\\/=?|[-+*/%]=?|[<>?]|\\b(?:and|or|not)\\b/\n      ],\n      'c-style-function': {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n        alias: 'function'\n      },\n      punctuation: /::|[()\\[\\]{},:;]|\\.(?=\\s*[\\[\\w$])/,\n      dot: {\n        pattern: /\\./,\n        alias: 'important'\n      }\n    })\n    stringInterpolation.interpolation.inside.content.inside = jq\n  })(Prism)\n}\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,EAAjB;AACAA,EAAE,CAACC,WAAH,GAAiB,IAAjB;AACAD,EAAE,CAACE,OAAH,GAAa,EAAb;;AACA,SAASF,EAAT,CAAYG,KAAZ,EAAmB;EACjB;;EAAC,CAAC,UAASA,KAAT,EAAgB;IAChB,IAAIC,aAAa,GAAG,8BAA8BC,MAAlD;IACA,IAAIC,MAAM,GAAGC,MAAM,CACjB,kCAAkCF,MAAlC,CAAyCG,OAAzC,CAAiD,KAAjD,EAAwDJ,aAAxD,CADiB,CAAnB;IAGA,IAAIK,mBAAmB,GAAG;MACxBL,aAAa,EAAE;QACbM,OAAO,EAAEH,MAAM,CAAC,0BAA0BF,MAA1B,GAAmCD,aAApC,CADF;QAEbO,UAAU,EAAE,IAFC;QAGbC,MAAM,EAAE;UACNC,OAAO,EAAE;YACPH,OAAO,EAAE,uBADF;YAEPC,UAAU,EAAE,IAFL;YAGPC,MAAM,EAAE,IAHD,CAGM;;UAHN,CADH;UAMNE,WAAW,EAAE;QANP;MAHK;IADS,CAA1B;IAcA,IAAId,EAAE,GAAIG,KAAK,CAACY,SAAN,CAAgBf,EAAhB,GAAqB;MAC7BgB,OAAO,EAAE,KADoB;MAE7BC,QAAQ,EAAE;QACRP,OAAO,EAAEH,MAAM,CAACD,MAAM,CAACD,MAAP,GAAgB,gBAAgBA,MAAjC,CADP;QAERa,MAAM,EAAE,IAFA;QAGRN,MAAM,EAAEH;MAHA,CAFmB;MAO7BH,MAAM,EAAE;QACNI,OAAO,EAAEJ,MADH;QAENY,MAAM,EAAE,IAFF;QAGNN,MAAM,EAAEH;MAHF,CAPqB;MAY7BU,QAAQ,EAAE;QACRT,OAAO,EAAE,sBADD;QAERC,UAAU,EAAE;MAFJ,CAZmB;MAgB7BS,QAAQ,EAAE,SAhBmB;MAiB7B,oBAAoB;QAClBV,OAAO,EAAE,yBADS;QAElBW,KAAK,EAAE;MAFW,CAjBS;MAqB7BC,OAAO,EAAE,uHArBoB;MAsB7BC,OAAO,EAAE,oBAtBoB;MAuB7BC,MAAM,EAAE,yCAvBqB;MAwB7BC,QAAQ,EAAE,CACR;QACEf,OAAO,EAAE,MADX;QAEEW,KAAK,EAAE;MAFT,CADQ,EAKR,gEALQ,CAxBmB;MA+B7B,oBAAoB;QAClBX,OAAO,EAAE,uBADS;QAElBW,KAAK,EAAE;MAFW,CA/BS;MAmC7BP,WAAW,EAAE,mCAnCgB;MAoC7BY,GAAG,EAAE;QACHhB,OAAO,EAAE,IADN;QAEHW,KAAK,EAAE;MAFJ;IApCwB,CAA/B;IAyCAZ,mBAAmB,CAACL,aAApB,CAAkCQ,MAAlC,CAAyCC,OAAzC,CAAiDD,MAAjD,GAA0DZ,EAA1D;EACD,CA7DA,EA6DEG,KA7DF;AA8DF"},"metadata":{},"sourceType":"script"}