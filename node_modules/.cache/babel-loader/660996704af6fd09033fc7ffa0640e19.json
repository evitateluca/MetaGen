{"ast":null,"code":"'use strict';\n\nexports.parse = parse;\nexports.stringify = stringify;\nvar comma = ',';\nvar space = ' ';\nvar empty = ''; // Parse comma-separated tokens to an array.\n\nfunction parse(value) {\n  var values = [];\n  var input = String(value || empty);\n  var index = input.indexOf(comma);\n  var lastIndex = 0;\n  var end = false;\n  var val;\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n\n    val = input.slice(lastIndex, index).trim();\n\n    if (val || !end) {\n      values.push(val);\n    }\n\n    lastIndex = index + 1;\n    index = input.indexOf(comma, lastIndex);\n  }\n\n  return values;\n} // Compile an array to comma-separated tokens.\n// `options.padLeft` (default: `true`) pads a space left of each token, and\n// `options.padRight` (default: `false`) pads a space to the right of each token.\n\n\nfunction stringify(values, options) {\n  var settings = options || {};\n  var left = settings.padLeft === false ? empty : space;\n  var right = settings.padRight ? space : empty; // Ensure the last empty entry is seen.\n\n  if (values[values.length - 1] === empty) {\n    values = values.concat(empty);\n  }\n\n  return values.join(right + comma + left).trim();\n}","map":{"version":3,"names":["exports","parse","stringify","comma","space","empty","value","values","input","String","index","indexOf","lastIndex","end","val","length","slice","trim","push","options","settings","left","padLeft","right","padRight","concat","join"],"sources":["/Applications/MAMP/htdocs/metagen/node_modules/comma-separated-tokens/index.js"],"sourcesContent":["'use strict'\n\nexports.parse = parse\nexports.stringify = stringify\n\nvar comma = ','\nvar space = ' '\nvar empty = ''\n\n// Parse comma-separated tokens to an array.\nfunction parse(value) {\n  var values = []\n  var input = String(value || empty)\n  var index = input.indexOf(comma)\n  var lastIndex = 0\n  var end = false\n  var val\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    val = input.slice(lastIndex, index).trim()\n\n    if (val || !end) {\n      values.push(val)\n    }\n\n    lastIndex = index + 1\n    index = input.indexOf(comma, lastIndex)\n  }\n\n  return values\n}\n\n// Compile an array to comma-separated tokens.\n// `options.padLeft` (default: `true`) pads a space left of each token, and\n// `options.padRight` (default: `false`) pads a space to the right of each token.\nfunction stringify(values, options) {\n  var settings = options || {}\n  var left = settings.padLeft === false ? empty : space\n  var right = settings.padRight ? space : empty\n\n  // Ensure the last empty entry is seen.\n  if (values[values.length - 1] === empty) {\n    values = values.concat(empty)\n  }\n\n  return values.join(right + comma + left).trim()\n}\n"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,KAAR,GAAgBA,KAAhB;AACAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,KAAK,GAAG,EAAZ,C,CAEA;;AACA,SAASJ,KAAT,CAAeK,KAAf,EAAsB;EACpB,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,KAAK,GAAGC,MAAM,CAACH,KAAK,IAAID,KAAV,CAAlB;EACA,IAAIK,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAcR,KAAd,CAAZ;EACA,IAAIS,SAAS,GAAG,CAAhB;EACA,IAAIC,GAAG,GAAG,KAAV;EACA,IAAIC,GAAJ;;EAEA,OAAO,CAACD,GAAR,EAAa;IACX,IAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;MAChBA,KAAK,GAAGF,KAAK,CAACO,MAAd;MACAF,GAAG,GAAG,IAAN;IACD;;IAEDC,GAAG,GAAGN,KAAK,CAACQ,KAAN,CAAYJ,SAAZ,EAAuBF,KAAvB,EAA8BO,IAA9B,EAAN;;IAEA,IAAIH,GAAG,IAAI,CAACD,GAAZ,EAAiB;MACfN,MAAM,CAACW,IAAP,CAAYJ,GAAZ;IACD;;IAEDF,SAAS,GAAGF,KAAK,GAAG,CAApB;IACAA,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAcR,KAAd,EAAqBS,SAArB,CAAR;EACD;;EAED,OAAOL,MAAP;AACD,C,CAED;AACA;AACA;;;AACA,SAASL,SAAT,CAAmBK,MAAnB,EAA2BY,OAA3B,EAAoC;EAClC,IAAIC,QAAQ,GAAGD,OAAO,IAAI,EAA1B;EACA,IAAIE,IAAI,GAAGD,QAAQ,CAACE,OAAT,KAAqB,KAArB,GAA6BjB,KAA7B,GAAqCD,KAAhD;EACA,IAAImB,KAAK,GAAGH,QAAQ,CAACI,QAAT,GAAoBpB,KAApB,GAA4BC,KAAxC,CAHkC,CAKlC;;EACA,IAAIE,MAAM,CAACA,MAAM,CAACQ,MAAP,GAAgB,CAAjB,CAAN,KAA8BV,KAAlC,EAAyC;IACvCE,MAAM,GAAGA,MAAM,CAACkB,MAAP,CAAcpB,KAAd,CAAT;EACD;;EAED,OAAOE,MAAM,CAACmB,IAAP,CAAYH,KAAK,GAAGpB,KAAR,GAAgBkB,IAA5B,EAAkCJ,IAAlC,EAAP;AACD"},"metadata":{},"sourceType":"script"}